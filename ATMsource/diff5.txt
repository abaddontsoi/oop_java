diff --git a/ATMsource/ATM.java b/ATMsource/ATM.java
index 17143c4..11c542e 100644
--- a/ATMsource/ATM.java
+++ b/ATMsource/ATM.java
@@ -3,159 +3,247 @@
 
 public class ATM 
 {
-   private boolean userAuthenticated; // whether user is authenticated
-   private int currentAccountNumber; // current user's account number
-   private Screen screen; // ATM's screen
-   private Keypad keypad; // ATM's keypad
-   private CashDispenser cashDispenser; // ATM's cash dispenser
-   //private DepositSlot depositSlot; // ATM's deposit slot
-   private BankDatabase bankDatabase; // account information database
-
-   // constants corresponding to main menu options
-   private static final int BALANCE_INQUIRY = 1;
-   private static final int WITHDRAWAL = 2;
-   // private static final int DEPOSIT = 3;
-   
-   // added new main menu option
-   private static final int TRANSFER = 3;
-   // changed to last option 5
-   private static final int EXIT = 4;
+    private boolean userAuthenticated; // whether user is authenticated
+    private int currentAccountNumber; // current user's account number
+    private Screen screen; // ATM's screen
+    private Keypad keypad; // ATM's keypad
+    private CashDispenser cashDispenser; // ATM's cash dispenser
+    //private DepositSlot depositSlot; // ATM's deposit slot
+    private BankDatabase bankDatabase; // account information database
+
+    // constants corresponding to main menu options
+    private static final int BALANCE_INQUIRY = 1;
+    private static final int WITHDRAWAL = 2;
+    // private static final int DEPOSIT = 3;
+    
+    // added new main menu option
+    private static final int TRANSFER = 3;
+
+    // fourth option of different account types are,
+    // saving account: set compund frequency
+    // chequing account: set cheque limit
+    // general accout: exit
+    private static final int FORTH_OPTION = 4;
+
+    // exit option for cheque and saving account
+    private static final int EXIT = 5;
 
-  
+    // used as switch option
+    private final String GENERALTYPE = "General account";
+    private final String SAVINGTYPE = "Saving account";
+    private final String CHEQUEINGTYPE = "Cheque account";
 
 
    // no-argument ATM constructor initializes instance variables
-   public ATM() 
-   {
-      userAuthenticated = false; // user is not authenticated to start
-      currentAccountNumber = 0; // no current account number to start
-      screen = new Screen(); // create screen
-      keypad = new Keypad(); // create keypad 
-      cashDispenser = new CashDispenser(); // create cash dispenser
-      //depositSlot = new DepositSlot(); // create deposit slot
-      bankDatabase = new BankDatabase(); // create acct info database
-   } // end no-argument ATM constructor
-
-   // start ATM 
-   public void run()
-   {
-      // welcome and authenticate user; perform transactions
-      while ( true )
-      {
-         // loop while user is not yet authenticated
-         while ( !userAuthenticated ) 
-         {
-            screen.displayMessageLine( "\nWelcome!" );       
-            authenticateUser(); // authenticate user
-         } // end while
+    public ATM() 
+    {
+        userAuthenticated = false; // user is not authenticated to start
+        currentAccountNumber = 0; // no current account number to start
+        screen = new Screen(); // create screen
+        keypad = new Keypad(); // create keypad 
+        cashDispenser = new CashDispenser(); // create cash dispenser
+        //depositSlot = new DepositSlot(); // create deposit slot
+        bankDatabase = new BankDatabase(); // create acct info database
+    } // end no-argument ATM constructor
+
+    // start ATM 
+    public void run()
+    {
+        // welcome and authenticate user; perform transactions
+        while ( true )
+        {
+            // loop while user is not yet authenticated
+            while ( !userAuthenticated ) 
+            {
+                screen.displayMessageLine( "\nWelcome!" );       
+                authenticateUser(); // authenticate user
+            } // end while
          
-         performTransactions(); // user is now authenticated 
-         userAuthenticated = false; // reset before next ATM session
-         currentAccountNumber = 0; // reset before next ATM session 
-         screen.displayMessageLine( "\nThank you! Goodbye!" );
-      } // end while   
-   } // end method run
-
-   // attempts to authenticate user against database
-   private void authenticateUser() 
-   {
-      screen.displayMessage( "\nPlease enter your account number: " );
-      int accountNumber = keypad.getInput(); // input account number
-      screen.displayMessage( "\nEnter your PIN: " ); // prompt for PIN
-      int pin = keypad.getInput(); // input PIN
-      
-      // set userAuthenticated to boolean value returned by database
-      userAuthenticated = 
-         bankDatabase.authenticateUser( accountNumber, pin );
-      
-      // check whether authentication succeeded
-      if ( userAuthenticated )
-      {
-         currentAccountNumber = accountNumber; // save user's account #
-      } // end if
-      else
-         screen.displayMessageLine( 
-             "Invalid account number or PIN. Please try again." );
-   } // end method authenticateUser
-
-   // display the main menu and perform transactions
-   private void performTransactions() 
-   {
-      // local variable to store transaction currently being processed
-      Transaction currentTransaction = null;
+            performTransactions(); // user is now authenticated 
+            userAuthenticated = false; // reset before next ATM session
+            currentAccountNumber = 0; // reset before next ATM session 
+            screen.displayMessageLine( "\nThank you! Goodbye!" );
+        } // end while   
+    } // end method run
+
+    // attempts to authenticate user against database
+    private void authenticateUser() 
+    {
+        screen.displayMessage( "\nPlease enter your account number: " );
+        int accountNumber = keypad.getInput(); // input account number
+        screen.displayMessage( "\nEnter your PIN: " ); // prompt for PIN
+        int pin = keypad.getInput(); // input PIN
+        
+        // set userAuthenticated to boolean value returned by database
+        userAuthenticated = 
+            bankDatabase.authenticateUser( accountNumber, pin );
+        
+        // check whether authentication succeeded
+        if ( userAuthenticated )
+        {
+            currentAccountNumber = accountNumber; // save user's account #
+        } // end if
+        else
+            screen.displayMessageLine( 
+                "Invalid account number or PIN. Please try again." );
+    } // end method authenticateUser
+
+    private boolean transactions(int mainMenuSelection, String ACtype) {
+
+        Transaction currentTransaction = null;
+
+        boolean exitSignal = false;
+
+        while (!exitSignal ) {
+
+            switch ( mainMenuSelection )
+            {
+                // user chose to perform one of three transaction types
+                case BALANCE_INQUIRY: 
+                case WITHDRAWAL: 
+                //case DEPOSIT:
+                case TRANSFER:
+                case FORTH_OPTION:
+
+                    // initialize as new object of chosen type
+                    currentTransaction = 
+                        createTransaction( mainMenuSelection, ACtype );
+
+                    if (currentTransaction != null) {
+                        currentTransaction.execute(); // execute transaction when is not exit signal of general account    
+                    }
+                    return exitSignal;
+                    //break;
+                case EXIT: // user chose to terminate session
+                    screen.displayMessageLine( "\nExiting the system..." );
+                    exitSignal = true; // this ATM session should end
+                    return exitSignal;
+
+                    //break;
+                default: // user did not enter an integer from 1-4
+                    screen.displayMessageLine( 
+                    "\nYou did not enter a valid selection. Try again." );
+                    return exitSignal;
+                    //break;
+            }   // end switch
+        }
+        return exitSignal;
+    }
+
+    // display the main menu and perform transactions    
+    private void performTransactions(){
+
+        // Transaction currentTransaction = null;
       
-      boolean userExited = false; // user has not chosen to exit
-
-      // loop while user has not chosen option to exit system
-      while ( !userExited )
-      {     
-         // show main menu and get user selection
-         int mainMenuSelection = displayMainMenu();
-
-         // decide how to proceed based on user's menu selection
-         switch ( mainMenuSelection )
-         {
-            // user chose to perform one of three transaction types
-            case BALANCE_INQUIRY: 
-            case WITHDRAWAL: 
-            //case DEPOSIT:
-            case TRANSFER:
-
-               // initialize as new object of chosen type
-               currentTransaction = 
-                  createTransaction( mainMenuSelection );
-
-               currentTransaction.execute(); // execute transaction
-               break; 
-            case EXIT: // user chose to terminate session
-               screen.displayMessageLine( "\nExiting the system..." );
-               userExited = true; // this ATM session should end
-               break;
-            default: // user did not enter an integer from 1-4
-               screen.displayMessageLine( 
-                  "\nYou did not enter a valid selection. Try again." );
-               break;
-         } // end switch
-      } // end while
-   } // end method performTransactions
+        boolean userExited = false; // user has not chosen to exit
+
+        //int mainMenuSelection = displayMainMenu();
+
+        String type = bankDatabase.getAccountTypeString(currentAccountNumber);
+
+        while (!userExited) {
+            int mainMenuSelection = displayMainMenu();
+
+            userExited = transactions(mainMenuSelection, type);
+        }
+    }
    
-   // display the main menu and return an input selection
-   private int displayMainMenu()
-   {
-      screen.displayMessageLine( "\nMain menu:" );
-      screen.displayMessageLine( "1 - View my balance" );
-      screen.displayMessageLine( "2 - Withdraw cash" );
-      screen.displayMessageLine( "3 - Transfer funds" );
-      screen.displayMessageLine( "4 - Exit\n" );
-      screen.displayMessage( "Enter a choice: " );
-      return keypad.getInput(); // return user's selection
-   } // end method displayMainMenu
+    // display the main menu and return an input selection
+    private int displayMainMenu()
+    {
+        String type = bankDatabase.getAccountTypeString(currentAccountNumber);
+
+        int selection = 0;
+
+        // showing which type of current account
+        screen.displayMessageLine("\nYour account type is: " + type);
+
+        switch (type) {
+            case SAVINGTYPE:
+                displayMainMenuSaving();
+                selection = keypad.getInput();// return user's selection
+                break;
+            case CHEQUEINGTYPE:
+                displayMainMenuCheque();
+                selection = keypad.getInput();// return user's selection
+                break;
+            case GENERALTYPE:
+                displayMainMenuGeneral();
+                selection = keypad.getInput();// return user's selection
+                break;
+        }
+        
+        return selection;
+    } // end method displayMainMenu
+
+    // menu for general account
+    private void displayMainMenuGeneral() {
+        screen.displayMessageLine( "\nMain menu:" );
+        screen.displayMessageLine( "1 - View my balance" );
+        screen.displayMessageLine( "2 - Withdraw cash" );
+        screen.displayMessageLine( "3 - Transfer funds" );
+        screen.displayMessageLine( "4 - Exit\n" );
+
+        screen.displayMessageLine("Please enter your choice: ");
+    }
+
+    // menu for saving account
+    private void displayMainMenuSaving() {
+        screen.displayMessageLine( "\nMain menu:" );
+        screen.displayMessageLine( "1 - View my balance" );
+        screen.displayMessageLine( "2 - Withdraw cash" );
+        screen.displayMessageLine( "3 - Transfer funds" );
+        screen.displayMessageLine( "4 - Set Compound Frequency" );
+        screen.displayMessageLine( "5 - Exit\n" );
+        screen.displayMessageLine("Please enter your choice: ");
+
+    }
+
+    // menu for chequeing account
+    private void displayMainMenuCheque() {
+        screen.displayMessageLine( "\nMain menu:" );
+        screen.displayMessageLine( "1 - View my balance" );
+        screen.displayMessageLine( "2 - Withdraw cash" );
+        screen.displayMessageLine( "3 - Transfer funds" );
+        screen.displayMessageLine( "4 - Set cheque limit" );
+        screen.displayMessageLine( "5 - Exit\n" );
+
+        screen.displayMessageLine("Please enter your choice: ");
+    }
          
    // return object of specified Transaction subclass
-   private Transaction createTransaction( int type )
-   {
-      Transaction temp = null; // temporary Transaction variable
-      
-      // determine which type of Transaction to create     
-      switch ( type )
-      {
-         case BALANCE_INQUIRY: // create new BalanceInquiry transaction
-            temp = new BalanceInquiry( 
-               currentAccountNumber, screen, bankDatabase );
-            break;
-         case WITHDRAWAL: // create new Withdrawal transaction
-            temp = new Withdrawal( currentAccountNumber, screen, 
-               bankDatabase, keypad, cashDispenser );
-            break; 
-         case TRANSFER: // create new Deposit transaction
-            temp = new Transfer( currentAccountNumber, screen, 
-               bankDatabase, keypad);
-            break;
-
-      } // end switch
+    private Transaction createTransaction( int type , String ACType)
+    {
+        Transaction temp = null; // temporary Transaction variable
+        
+        // determine which type of Transaction to create     
+        switch ( type )
+        {
+            case BALANCE_INQUIRY: // create new BalanceInquiry transaction
+                temp = new BalanceInquiry( 
+                currentAccountNumber, screen, bankDatabase );
+                break;
+            case WITHDRAWAL: // create new Withdrawal transaction
+                temp = new Withdrawal( currentAccountNumber, screen, 
+                bankDatabase, keypad, cashDispenser );
+                break; 
+            case TRANSFER: // create new Deposit transaction
+                temp = new Transfer( currentAccountNumber, screen, 
+                bankDatabase, keypad);
+                break;
+            case FORTH_OPTION:
+                if (ACType == SAVINGTYPE) {
+                    temp = new SetComFre(currentAccountNumber, screen, bankDatabase, keypad);
+                }
+                if (ACType == CHEQUEINGTYPE) {
+                    temp = new SetLimit(currentAccountNumber, screen, bankDatabase, keypad);
+                }else{
+                    break;
+                }
+        } // end switch
 
       return temp; // return the newly created object
-   } // end method createTransaction
+    } // end method createTransaction
 } // end class ATM
 
 
diff --git a/ATMsource/Account.java b/ATMsource/Account.java
index c308eca..3c0bbf3 100644
--- a/ATMsource/Account.java
+++ b/ATMsource/Account.java
@@ -3,60 +3,68 @@
 
 public class Account 
 {
-   private int accountNumber; // account number
-   private int pin; // PIN for authentication
-   private double availableBalance; // funds available for withdrawal
-   private double totalBalance; // funds available + pending deposits
+	private int accountNumber; // account number
+	private int pin; // PIN for authentication
+	private double availableBalance; // funds available for withdrawal
+	private double totalBalance; // funds available + pending deposits
 
-   // Account constructor initializes attributes
-   public Account( int theAccountNumber, int thePIN, 
-      double theAvailableBalance, double theTotalBalance )
-   {
-      accountNumber = theAccountNumber;
-      pin = thePIN;
-      availableBalance = theAvailableBalance;
-      totalBalance = theTotalBalance;
-   } // end Account constructor
+	// we assume existing accounts remain it original type, until the owner requests for changing
+	private static final String TYPE = "General account";
 
-   // determines whether a user-specified PIN matches PIN in Account
-   public boolean validatePIN( int userPIN )
-   {
-      if ( userPIN == pin )
-         return true;
-      else
-         return false;
-   } // end method validatePIN
-   
-   // returns available balance
-   public double getAvailableBalance()
-   {
-      return availableBalance;
-   } // end getAvailableBalance
+	// Account constructor initializes attributes
+	public Account( int theAccountNumber, int thePIN, 
+		double theAvailableBalance, double theTotalBalance )
+	{
+		accountNumber = theAccountNumber;
+		pin = thePIN;
+		availableBalance = theAvailableBalance;
+		totalBalance = theTotalBalance;
+	} // end Account constructor
 
-   // returns the total balance
-   public double getTotalBalance()
-   {
-      return totalBalance;
-   } // end method getTotalBalance
+	// determines whether a user-specified PIN matches PIN in Account
+	public boolean validatePIN( int userPIN )
+	{
+		if ( userPIN == pin )
+			return true;
+		else
+			return false;
+	} // end method validatePIN
+	
+	// returns available balance
+	public double getAvailableBalance()
+	{
+		return availableBalance;
+	} // end getAvailableBalance
 
-   // credits an amount to the account
-   public void credit( double amount )
-   {
-      totalBalance += amount; // add to total balance
-   } // end method credit
+	// returns the total balance
+	public double getTotalBalance()
+	{
+		return totalBalance;
+	} // end method getTotalBalance
 
-   // debits an amount from the account
-   public void debit( double amount )
-   {
-      availableBalance -= amount; // subtract from available balance
-      totalBalance -= amount; // subtract from total balance
-   } // end method debit
+	// credits an amount to the account
+	public void credit( double amount )
+	{
+		totalBalance += amount; // add to total balance
+	} // end method credit
 
-   // returns account number
-   public int getAccountNumber()
-   {
-      return accountNumber;  
-   } // end method getAccountNumber
+	// debits an amount from the account
+	public void debit( double amount )
+	{
+		availableBalance -= amount; // subtract from available balance
+		totalBalance -= amount; // subtract from total balance
+	} // end method debit
+
+	// returns account number
+	public int getAccountNumber()
+	{
+		return accountNumber;  
+	} // end method getAccountNumber
+
+	// returns account type
+	public String getType() {
+		return TYPE; 
+	}
 } // end class Account
 
 
diff --git a/ATMsource/BankDatabase.java b/ATMsource/BankDatabase.java
index dab337b..936fc36 100644
--- a/ATMsource/BankDatabase.java
+++ b/ATMsource/BankDatabase.java
@@ -1,89 +1,114 @@
+
 // BankDatabase.java
 // Represents the bank account information database 
 
 public class BankDatabase
 {
-   private Account accounts[]; // array of Accounts
-   
-   // no-argument BankDatabase constructor initializes accounts
-   public BankDatabase()
-   {
-      accounts = new Account[ 4 ]; // just 2 accounts for testing
-      accounts[ 0 ] = new Account( 12345, 54321, 1000.0, 1200.0 );
-      accounts[ 1 ] = new Account( 98765, 56789, 200.0, 200.0 );
-
-      // new accounts of checque account and saving account
-      accounts[ 2 ] = new ChecqueAccount(23456, 65432, 500, 1000);
-      accounts[ 3 ] = new SavingAccount(34567, 76543, 2000, 2500); 
-   } // end no-argument BankDatabase constructor
-   
-   // retrieve Account object containing specified account number
-   private Account getAccount( int accountNumber )
-   {
-      // loop through accounts searching for matching account number
-      for ( Account currentAccount : accounts )
-      {
-         // return current account if match found
-         if ( currentAccount.getAccountNumber() == accountNumber )
-            return currentAccount;
-      } // end for
-
-      return null; // if no matching account was found, return null
-   } // end method getAccount
-
-   // determine whether user-specified account number and PIN match
-   // those of an account in the database
-   public boolean authenticateUser( int userAccountNumber, int userPIN )
-   {
-      // attempt to retrieve the account with the account number
-      Account userAccount = getAccount( userAccountNumber );
-
-      // if account exists, return result of Account method validatePIN
-      if ( userAccount != null )
-         return userAccount.validatePIN( userPIN );
-      else
-         return false; // account number not found, so return false
-   } // end method authenticateUser
-
-   // to check whether the account is exists in the database
-   public boolean accountExists(int ACnumber){
-
-      int acFound = 0;
-
-      // loop through accounts searching for matching account number
-      for ( Account currentAccount : accounts )
-      {
-         if(currentAccount.getAccountNumber() == ACnumber)
-            acFound += 1;
-      } // end for
-
-      // return true when only one account is matched with ACnumber
-      return acFound==1;
-
-   }
-   // return available balance of Account with specified account number
-   public double getAvailableBalance( int userAccountNumber )
-   {
-      return getAccount( userAccountNumber ).getAvailableBalance();
-   } // end method getAvailableBalance
-
-   // return total balance of Account with specified account number
-   public double getTotalBalance( int userAccountNumber )
-   {
-      return getAccount( userAccountNumber ).getTotalBalance();
-   } // end method getTotalBalance
-
-   // credit an amount to Account with specified account number
-   public void credit( int userAccountNumber, double amount )
-   {
-      getAccount( userAccountNumber ).credit( amount );
-   } // end method credit
-
-   // debit an amount from of Account with specified account number
-   public void debit( int userAccountNumber, double amount )
-   {
-      getAccount( userAccountNumber ).debit( amount );
-   } // end method debit
+	private Account accounts[]; // array of Accounts
+	
+	// no-argument BankDatabase constructor initializes accounts
+	public BankDatabase()
+	{
+		accounts = new Account[ 4 ]; // just 2 accounts for default testing, and 2 for account types testing
+		accounts[ 0 ] = new Account( 12345, 54321, 1000.0, 1200.0 );
+		accounts[ 1 ] = new Account( 98765, 56789, 200.0, 200.0 );
+
+		// new accounts of checque account and saving account
+		accounts[ 2 ] = new ChequeAccount(2, 2, 500, 1000);
+		accounts[ 3 ] = new SavingAccount(3, 3, 2000, 2500); 
+
+	} // end no-argument BankDatabase constructor
+	
+	// retrieve Account object containing specified account number
+	private Account getAccount( int accountNumber )
+	{
+		// loop through accounts searching for matching account number
+		for ( Account currentAccount : accounts )
+		{
+			// return current account if match found
+			if ( currentAccount.getAccountNumber() == accountNumber )
+				return currentAccount;
+		} // end for
+
+		return null; // if no matching account was found, return null
+	} // end method getAccount
+
+	// determine whether user-specified account number and PIN match
+	// those of an account in the database
+	public boolean authenticateUser( int userAccountNumber, int userPIN )
+	{
+		// attempt to retrieve the account with the account number
+		Account userAccount = getAccount( userAccountNumber );
+
+		// if account exists, return result of Account method validatePIN
+		if ( userAccount != null )
+			return userAccount.validatePIN( userPIN );
+		else
+			return false; // account number not found, so return false
+	} // end method authenticateUser
+
+	// to check whether the account is exists in the database
+	public boolean accountExists(int ACnumber){
+
+		int acFound = 0;
+
+		// loop through accounts searching for matching account number
+		for ( Account currentAccount : accounts )
+		{
+			if(currentAccount.getAccountNumber() == ACnumber)
+				acFound += 1;
+		} // end for
+
+		// return true when only one account is matched with ACnumber
+		return acFound==1;
+
+	}
+	// return available balance of Account with specified account number
+	public double getAvailableBalance( int userAccountNumber )
+	{
+		return getAccount( userAccountNumber ).getAvailableBalance();
+	} // end method getAvailableBalance
+
+	// return total balance of Account with specified account number
+	public double getTotalBalance( int userAccountNumber )
+	{
+		return getAccount( userAccountNumber ).getTotalBalance();
+	} // end method getTotalBalance
+
+	// credit an amount to Account with specified account number
+	public void credit( int userAccountNumber, double amount )
+	{
+		getAccount( userAccountNumber ).credit( amount );
+	} // end method credit
+
+	// debit an amount from of Account with specified account number
+	public void debit( int userAccountNumber, double amount )
+	{
+		getAccount( userAccountNumber ).debit( amount );
+	} // end method debit
+
+   	public void setChequeLimit(int userAccountNumber, double amount) {
+
+		// downcasting current account to ChequeAccount for setting limit
+		ChequeAccount temp = (ChequeAccount) getAccount(userAccountNumber);
+        temp.setLimit(amount);
+   	}
+
+	// return user's account tyoe in string
+	public String getAccountTypeString(int userAccountNumber) {
+		return getAccount(userAccountNumber).getType();
+	}
+
+	public void setFrequency(int currentAccountNumber, int FreSelection) {
+		SavingAccount temp = (SavingAccount) getAccount(currentAccountNumber);
+		temp.setFrequency(FreSelection);
+	}
+
+	public double getCurrentRate(int currentAccountNumber) {
+		SavingAccount temp = (SavingAccount) getAccount(currentAccountNumber);
+		double rate = temp.getInterestRate();
+		return rate;
+	}
 } // end class BankDatabase
 
 
diff --git a/ATMsource/ChecqueAccount.java b/ATMsource/ChecqueAccount.java
deleted file mode 100644
index d65fab1..0000000
--- a/ATMsource/ChecqueAccount.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class ChecqueAccount extends Account {
-
-    private double LimitPerCheque;
-
-    public ChecqueAccount(int theAccountNumber, int thePIN, 
-    double theAvailableBalance, double theTotalBalance) {
-        
-        super(theAccountNumber, thePIN, theAvailableBalance, theTotalBalance);
-        LimitPerCheque = 10000;
-    }
-
-    public void setLimit(double limit) {
-        LimitPerCheque = limit;
-    }
-
-    public double getLimit(){
-        return LimitPerCheque;
-    }
-}
diff --git a/ATMsource/Keypad.java b/ATMsource/Keypad.java
index cd035c7..e3a47c7 100644
--- a/ATMsource/Keypad.java
+++ b/ATMsource/Keypad.java
@@ -4,19 +4,19 @@ import java.util.Scanner; // program uses Scanner to obtain user input
 
 public class Keypad
 {
-   private Scanner input; // reads data from the command line
-                         
-   // no-argument constructor initializes the Scanner
-   public Keypad()
-   {
-      input = new Scanner( System.in );    
-   } // end no-argument Keypad constructor
+	private Scanner input; // reads data from the command line
+							
+	// no-argument constructor initializes the Scanner
+	public Keypad()
+	{
+		input = new Scanner( System.in );    
+	} // end no-argument Keypad constructor
 
-   // return an integer value entered by user 
-   public int getInput()
-   {
-      return input.nextInt(); // we assume that user enters an integer  
-   } // end method getInput
+	// return an integer value entered by user 
+	public int getInput()
+	{		
+		return input.nextInt(); // we assume that user enters an integer  
+	} // end method getInput
 } // end class Keypad  
 
 
diff --git a/ATMsource/SavingAccount.java b/ATMsource/SavingAccount.java
index a334429..0fde98b 100644
--- a/ATMsource/SavingAccount.java
+++ b/ATMsource/SavingAccount.java
@@ -2,6 +2,10 @@ public class SavingAccount extends Account{
 
     private double interestRate;
 
+    private static final String TYPE = "Saving account";
+    private int FREQUENCY;
+
+
     public SavingAccount(int theAccountNumber, int thePIN, 
     double theAvailableBalance, double theTotalBalance){
 
@@ -10,11 +14,21 @@ public class SavingAccount extends Account{
         interestRate = 0.001;
     }
 
-    public void setInterestRate(double rate) {
-        interestRate = rate;
-    }
-
     public double getInterestRate() {
         return interestRate;
     }
+
+    public double getFre() {
+        return FREQUENCY;
+    }
+
+    // returns account type
+    @Override
+    public String getType() {
+        return TYPE;
+    }
+
+    public void setFrequency(int freSelection) {
+            FREQUENCY = freSelection;
+    }
 }
diff --git a/ATMsource/Transaction.java b/ATMsource/Transaction.java
index 508fea8..8d79c29 100644
--- a/ATMsource/Transaction.java
+++ b/ATMsource/Transaction.java
@@ -1,6 +1,8 @@
 // Transaction.java
 // Abstract superclass Transaction represents an ATM transaction
 
+//import java.lang.Math;
+
 public abstract class Transaction
 {
    private int accountNumber; // indicates account involved
diff --git a/ATMsource/Transfer.java b/ATMsource/Transfer.java
index b70dc59..2fa53c7 100644
--- a/ATMsource/Transfer.java
+++ b/ATMsource/Transfer.java
@@ -45,13 +45,21 @@ public class Transfer extends Transaction {
         target = keypad.getInput();
 
         screen.displayMessage("Please enter amount: ");
-        amount = keypad.getInput();
+        try {
+            amount = keypad.getInput();
 
-       if (isSufficientTransfer(amount, availableBalance) && bankDatabase.accountExists(target) && target != currentAccountNumber) {
+        } catch (Exception e) {
+
+            // to maintain all inputs are integer, fund with cents are not considered
+            screen.displayMessageLine("Input mismatch! $0 will be transfered.");
+            amount = 0;
+        }
+
+        if (isSufficientTransfer(amount, availableBalance) && bankDatabase.accountExists(target) && target != currentAccountNumber) {
             
             bankDatabase.debit(currentAccountNumber, amount);
             bankDatabase.credit(target, amount);
-       }else{
+        }else{  
 
             screen.displayMessageLine("Availavle balance is lower than transfer amount or target account unavailable.");
             screen.displayMessageLine("Progress aborted."); 
diff --git a/ATMsource/cp/ATM.class b/ATMsource/cp/ATM.class
index 8be722f..7393661 100644
Binary files a/ATMsource/cp/ATM.class and b/ATMsource/cp/ATM.class differ
diff --git a/ATMsource/cp/Account.class b/ATMsource/cp/Account.class
index d6f406c..b1cbd00 100644
Binary files a/ATMsource/cp/Account.class and b/ATMsource/cp/Account.class differ
diff --git a/ATMsource/cp/BankDatabase.class b/ATMsource/cp/BankDatabase.class
index 3349273..b55de8e 100644
Binary files a/ATMsource/cp/BankDatabase.class and b/ATMsource/cp/BankDatabase.class differ
diff --git a/ATMsource/cp/CashDispenser.class b/ATMsource/cp/CashDispenser.class
index aa7c0c9..5ea19b5 100644
Binary files a/ATMsource/cp/CashDispenser.class and b/ATMsource/cp/CashDispenser.class differ
diff --git a/ATMsource/cp/Transaction.class b/ATMsource/cp/Transaction.class
index f8b658d..70a3b36 100644
Binary files a/ATMsource/cp/Transaction.class and b/ATMsource/cp/Transaction.class differ
diff --git a/ATMsource/cp/Transfer.class b/ATMsource/cp/Transfer.class
index 89cc4e2..07624bd 100644
Binary files a/ATMsource/cp/Transfer.class and b/ATMsource/cp/Transfer.class differ
diff --git a/ATMsource/cp/Withdrawal.class b/ATMsource/cp/Withdrawal.class
index 39fb9eb..797c5f3 100644
Binary files a/ATMsource/cp/Withdrawal.class and b/ATMsource/cp/Withdrawal.class differ
diff --git a/ATMsource/cp/checqueAccount.class b/ATMsource/cp/checqueAccount.class
index 37c81f0..94360f1 100644
Binary files a/ATMsource/cp/checqueAccount.class and b/ATMsource/cp/checqueAccount.class differ
diff --git a/ATMsource/cp/savingAccount.class b/ATMsource/cp/savingAccount.class
index 0c9122b..9a32855 100644
Binary files a/ATMsource/cp/savingAccount.class and b/ATMsource/cp/savingAccount.class differ
