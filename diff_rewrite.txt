diff --git a/ATMsource/ATM.java b/ATMsource/ATM.java
index 6224873..8413734 100644
--- a/ATMsource/ATM.java
+++ b/ATMsource/ATM.java
@@ -1,3 +1,6 @@
+import javax.print.DocFlavor.CHAR_ARRAY;
+import javax.print.attribute.standard.MediaName;
+
 // ATM.java
 // Represents an automated teller machine
 
@@ -19,19 +22,20 @@ public class ATM
     // added new main menu option
     private static final int TRANSFER = 3;
 
-    // fourth option of different account types are,
-    // saving account: set compund frequency
-    // chequing account: set cheque limit
-    // general accout: exit
-    private static final int FORTH_OPTION = 4;
+    // for exit
+    private static final int EXIT = 0;
 
-    // exit option for cheque and saving account
-    private static final int EXIT = 5;
+    // for swaping
+    private Account swap = null;
+    private static final int SWAPTOSAVING = 8;
+    private static final int SWAPTOCHEQUING = 9;
+    private static final int NOSWAPPING = 0;
 
     // used as switch option
     private final String GENERALTYPE = "General account";
     private final String SAVINGTYPE = "Saving account";
     private final String CHEQUEINGTYPE = "Cheque account";
+    private final String BOTHTYPE = "Both";
 
 
    // no-argument ATM constructor initializes instance variables
@@ -86,8 +90,52 @@ public class ATM
         else
             screen.displayMessageLine( 
                 "Invalid account number or PIN. Please try again." );
+
+        if (bankDatabase.getAccountTypeString(currentAccountNumber)==BOTHTYPE) {
+            bankDatabase.passBalance(currentAccountNumber);
+        }
     } // end method authenticateUser
 
+    // display the main menu and perform transactions    
+    private void performTransactions(){
+
+        // Transaction currentTransaction = null;
+      
+        boolean userExited = false; // user has not chosen to exit
+
+        //int mainMenuSelection = displayMainMenu();
+
+        String type = bankDatabase.getAccountTypeString(currentAccountNumber);
+
+        //int swapSelection ;
+
+        while (!userExited) {
+            int mainMenuSelection = displayMainMenu();
+
+            switch (mainMenuSelection) {
+                case SWAPTOCHEQUING:
+                    swap = bankDatabase.swapToChequing(currentAccountNumber);
+                    performTransactions();
+                    break;
+                case SWAPTOSAVING: 
+                    swap = bankDatabase.swapToSaving(currentAccountNumber);
+                    performTransactions();
+                    break;
+                case NOSWAPPING:
+                    userExited = true;
+                    break;
+                default:
+                    // if swapped, change type to swapped account and perform related transactions.
+                    if (swap != null) {
+                        type = bankDatabase.getAccountTypeString(swap.getAccountNumber());
+                    }
+                    userExited = transactionsControl(mainMenuSelection, type);
+            }
+            mainMenuSelection = 0;
+        }
+        swap = null;
+    }
+
     private boolean transactionsControl(int mainMenuSelection, String ACtype) {
 
         Transaction currentTransaction = null;
@@ -103,18 +151,12 @@ public class ATM
                 case WITHDRAWAL: 
                 //case DEPOSIT:
                 case TRANSFER:
-                case FORTH_OPTION:
 
                     // initialize as new object of chosen type
                     currentTransaction = 
                         createTransaction( mainMenuSelection, ACtype );
 
-                    if (currentTransaction != null) {
-                        currentTransaction.execute(); // execute transaction when is not exit signal of general account    
-                    }
-                    else {
-                        exitSignal = true;
-                    }
+                    currentTransaction.execute(); // execute transaction when is not exit signal of general account    
                     return exitSignal;
                     //break;
                 case EXIT: // user chose to terminate session
@@ -133,119 +175,95 @@ public class ATM
         return exitSignal;
     }
 
-    // display the main menu and perform transactions    
-    private void performTransactions(){
-
-        // Transaction currentTransaction = null;
-      
-        boolean userExited = false; // user has not chosen to exit
-
-        //int mainMenuSelection = displayMainMenu();
-
-        String type = bankDatabase.getAccountTypeString(currentAccountNumber);
-
-        while (!userExited) {
-            int mainMenuSelection = displayMainMenu();
-
-            userExited = transactionsControl(mainMenuSelection, type);
-        }
-    }
-   
     // display the main menu and return an input selection
     private int displayMainMenu()
     {
-        String type = bankDatabase.getAccountTypeString(currentAccountNumber);
+        // String type = bankDatabase.getAccountTypeString(currentAccountNumber);
+        String type = (swap instanceof SavingAccount) ? SAVINGTYPE : (swap instanceof ChequeAccount)? CHEQUEINGTYPE: 
+            bankDatabase.getAccountTypeString(currentAccountNumber);
 
+        swap = (swap instanceof SavingAccount)? swap = (SavingAccount) swap : (swap instanceof ChequeAccount)?
+            swap = (ChequeAccount) swap : swap;
         int selection = 0;
 
         // showing which type of current account
-        screen.displayMessageLine("\nYour account type is: " + type);
-
-        switch (type) {
-            case SAVINGTYPE:
-                displayMainMenuSaving();
-                selection = keypad.getInput();// return user's selection
-                break;
-            case CHEQUEINGTYPE:
-                displayMainMenuCheque();
-                selection = keypad.getInput();// return user's selection
-                break;
-            case GENERALTYPE:
-                displayMainMenuGeneral();
-                selection = keypad.getInput();// return user's selection
-                break;
+        screen.displayMessageLine("\nYour current account type is: " + type);
+
+        if (bankDatabase.isSwapable(currentAccountNumber) && swap == null) {
+            selection = swapMenu();
+        }else{
+            selection = _displayMainMenu();
         }
-        
+
         return selection;
     } // end method displayMainMenu
 
-    // menu for general account
-    private void displayMainMenuGeneral() {
-        screen.displayMessageLine( "\nMain menu:" );
-        screen.displayMessageLine( "1 - View my balance" );
-        screen.displayMessageLine( "2 - Withdraw cash" );
-        screen.displayMessageLine( "3 - Transfer funds" );
-        screen.displayMessageLine( "4 - Exit\n" );
+    private int swapMenu() {
+        screen.displayMessageLine( "\nSwap menu:" );
+        screen.displayMessageLine( "8 - Swap to saving account" );
+        screen.displayMessageLine( "9 - Swap to chequing account" );
+        screen.displayMessageLine( "0 - Exit" );
 
         screen.displayMessageLine("Please enter your choice: ");
+        return keypad.getInput();
     }
 
-    // menu for saving account
-    private void displayMainMenuSaving() {
+    // menu for every account
+    private int _displayMainMenu() {
         screen.displayMessageLine( "\nMain menu:" );
         screen.displayMessageLine( "1 - View my balance" );
         screen.displayMessageLine( "2 - Withdraw cash" );
         screen.displayMessageLine( "3 - Transfer funds" );
-        screen.displayMessageLine( "4 - Set Compound Frequency" );
-        screen.displayMessageLine( "5 - Exit\n" );
-        screen.displayMessageLine("Please enter your choice: ");
-
-    }
-
-    // menu for chequeing account
-    private void displayMainMenuCheque() {
-        screen.displayMessageLine( "\nMain menu:" );
-        screen.displayMessageLine( "1 - View my balance" );
-        screen.displayMessageLine( "2 - Withdraw cash" );
-        screen.displayMessageLine( "3 - Transfer funds" );
-        screen.displayMessageLine( "4 - Set cheque limit" );
-        screen.displayMessageLine( "5 - Exit\n" );
+        screen.displayMessageLine( "0 - Exit\n" );
 
         screen.displayMessageLine("Please enter your choice: ");
+        return keypad.getInput();
     }
          
-   // return object of specified Transaction subclass
-    private Transaction createTransaction( int type , String ACType)
+    // return object of specified Transaction subclass
+    private Transaction createTransaction( int input , String ACType)
     {
         Transaction temp = null; // temporary Transaction variable
         
         // determine which type of Transaction to create     
-        switch ( type )
-        {
-            case BALANCE_INQUIRY: // create new BalanceInquiry transaction
-                temp = new BalanceInquiry( 
-                currentAccountNumber, screen, bankDatabase );
-                break;
-            case WITHDRAWAL: // create new Withdrawal transaction
-                temp = new Withdrawal( currentAccountNumber, screen, 
-                bankDatabase, keypad, cashDispenser );
-                break; 
-            case TRANSFER: // create new Deposit transaction
-                temp = new Transfer( currentAccountNumber, screen, 
-                bankDatabase, keypad);
-                break;
-            case FORTH_OPTION:
-                if (ACType == SAVINGTYPE) {
-                    temp = new SetComFre(currentAccountNumber, screen, bankDatabase, keypad);
-                }
-                if (ACType == CHEQUEINGTYPE) {
-                    temp = new SetLimit(currentAccountNumber, screen, bankDatabase, keypad);
-                }else{
-                    break;
-                }
-        } // end switch
-
-      return temp; // return the newly created object
+        if (swap != null) {
+                switch ( input )
+                {
+                    case BALANCE_INQUIRY: // create new BalanceInquiry transaction
+                        temp = new BalanceInquiry( 
+                        swap, screen, bankDatabase );
+                        break;
+                    case WITHDRAWAL: // create new Withdrawal transaction
+                        temp = new Withdrawal( swap, screen, 
+                        bankDatabase, keypad, cashDispenser );
+                        break; 
+                    case TRANSFER: // create new Transfer transaction
+                        temp = new Transfer( swap, screen, 
+                        bankDatabase, keypad);
+                        break;
+                    case EXIT:
+                            break;
+                } // end switch
+            } else {
+                switch ( input )
+                {
+                    case BALANCE_INQUIRY: // create new BalanceInquiry transaction
+                        temp = new BalanceInquiry( 
+                        currentAccountNumber, screen, bankDatabase );
+                        break;
+                    case WITHDRAWAL: // create new Withdrawal transaction
+                        temp = new Withdrawal( currentAccountNumber, screen, 
+                        bankDatabase, keypad, cashDispenser );
+                        break; 
+                    case TRANSFER: // create new Transfer transaction
+                        temp = new Transfer( currentAccountNumber, screen, 
+                        bankDatabase, keypad);
+                        break;
+                    case EXIT:
+                            break;
+                } // end switch        
+            }
+        return temp; // return the newly created object
     } // end method createTransaction
 } // end class ATM
 
diff --git a/ATMsource/Account.java b/ATMsource/Account.java
index 3c0bbf3..a374d05 100644
--- a/ATMsource/Account.java
+++ b/ATMsource/Account.java
@@ -8,8 +8,12 @@ public class Account
 	private double availableBalance; // funds available for withdrawal
 	private double totalBalance; // funds available + pending deposits
 
+	// these attributes are only for accounts having saving and chequeing purpose
+	private SavingAccount saving = null;
+	private ChequeAccount chequing = null;
+
 	// we assume existing accounts remain it original type, until the owner requests for changing
-	private static final String TYPE = "General account";
+	private static String TYPE = "General account";
 
 	// Account constructor initializes attributes
 	public Account( int theAccountNumber, int thePIN, 
@@ -21,6 +25,41 @@ public class Account
 		totalBalance = theTotalBalance;
 	} // end Account constructor
 
+	// constructor initializes attributes for both saving and chequeing purpose 
+	public Account(int theAccountNumber, int thePIN, 
+	double savingAvailableBalance, double savingTotalBalance, double chequingAvailableBalance, double chequingTotalBalance)
+	{
+		accountNumber = theAccountNumber;
+		pin = thePIN;
+
+		saving = new SavingAccount(theAccountNumber, thePIN, savingAvailableBalance, savingTotalBalance);
+		chequing = new ChequeAccount(theAccountNumber, thePIN, chequingAvailableBalance, chequingTotalBalance);
+
+		TYPE = "Both";
+	}
+
+	public void _passBalance() {
+		if(_isSwapable()){
+			saving.credit(totalBalance);
+			totalBalance = 0;
+		}
+	}
+
+	// return true when the user owns both saving and chequing accounts
+	public boolean _isSwapable() {
+		return (saving != null) && (chequing != null);
+	}
+
+	// swap to saving account
+	public SavingAccount _swapToSaving(){
+		return saving;
+	}
+
+	// swap to chequing accout
+	public ChequeAccount _swapToChequing(){
+		return chequing;
+	}
+
 	// determines whether a user-specified PIN matches PIN in Account
 	public boolean validatePIN( int userPIN )
 	{
diff --git a/ATMsource/BalanceInquiry.java b/ATMsource/BalanceInquiry.java
index d45fa6a..c5dcf5d 100644
--- a/ATMsource/BalanceInquiry.java
+++ b/ATMsource/BalanceInquiry.java
@@ -10,21 +10,40 @@ public class BalanceInquiry extends Transaction
       super( userAccountNumber, atmScreen, atmBankDatabase );
    } // end BalanceInquiry constructor
 
+   public BalanceInquiry( Account userAccount, Screen atmScreen, 
+      BankDatabase atmBankDatabase )
+   {
+      super( userAccount, atmScreen, atmBankDatabase );
+   }
+
    // performs the transaction
    public void execute()
    {
       // get references to bank database and screen
       BankDatabase bankDatabase = getBankDatabase();
       Screen screen = getScreen();
+      double availableBalance,totalBalance;
+      //double totalBalance;
+
+      // if it is not a compound bank account, use account number on transaction 
+      if (super.getAccount() != null) {
+         // get the available balance for the account involved
+         availableBalance = 
+            bankDatabase.getAvailableBalance( getAccount() );
 
-      // get the available balance for the account involved
-      double availableBalance = 
-         bankDatabase.getAvailableBalance( getAccountNumber() );
+         // get the total balance for the account involved
+         totalBalance = 
+            bankDatabase.getTotalBalance( getAccount() );
+         
+      }else{
+         // get the available balance for the account involved
+         availableBalance = 
+            bankDatabase.getAvailableBalance( getAccountNumber() );
 
-      // get the total balance for the account involved
-      double totalBalance = 
-         bankDatabase.getTotalBalance( getAccountNumber() );
-      
+         // get the total balance for the account involved
+         totalBalance = 
+            bankDatabase.getTotalBalance( getAccountNumber() );
+      }
       // display the balance information on the screen
       screen.displayMessageLine( "\nBalance Information:" );
       screen.displayMessage( " - Available balance: " ); 
diff --git a/ATMsource/BankDatabase.java b/ATMsource/BankDatabase.java
index 936fc36..fb086e9 100644
--- a/ATMsource/BankDatabase.java
+++ b/ATMsource/BankDatabase.java
@@ -10,12 +10,16 @@ public class BankDatabase
 	public BankDatabase()
 	{
 		accounts = new Account[ 4 ]; // just 2 accounts for default testing, and 2 for account types testing
-		accounts[ 0 ] = new Account( 12345, 54321, 1000.0, 1200.0 );
+		accounts[ 0 ] = new SavingAccount( 12345, 54321, 1000.0, 1200.0 );
+
+		// for users having general account, (i.e. neither saving nor chequing)
 		accounts[ 1 ] = new Account( 98765, 56789, 200.0, 200.0 );
 
 		// new accounts of checque account and saving account
 		accounts[ 2 ] = new ChequeAccount(2, 2, 500, 1000);
-		accounts[ 3 ] = new SavingAccount(3, 3, 2000, 2500); 
+
+		// new account for users having both saving and chequing
+		accounts[ 3 ] = new Account(3, 3, 900000, 1000000, 200000, 400000);
 
 	} // end no-argument BankDatabase constructor
 	
@@ -63,17 +67,50 @@ public class BankDatabase
 		return acFound==1;
 
 	}
+
 	// return available balance of Account with specified account number
 	public double getAvailableBalance( int userAccountNumber )
 	{
 		return getAccount( userAccountNumber ).getAvailableBalance();
 	} // end method getAvailableBalance
+	public double getAvailableBalance( Account userAccount )
+	{
+		return userAccount.getAvailableBalance();
+	} // end method getAvailableBalance
+
 
 	// return total balance of Account with specified account number
 	public double getTotalBalance( int userAccountNumber )
 	{
 		return getAccount( userAccountNumber ).getTotalBalance();
 	} // end method getTotalBalance
+	// return total balance of Account with specified account number
+	public double getTotalBalance( Account userAccount )
+	{
+			return userAccount.getTotalBalance();
+	} // end method getTotalBalance
+
+	// return saving account total balance
+	// return chequing account total balance
+	public double getTotalBalance( int userAccountNumber, String ACType )
+	{
+		
+		switch (ACType) {
+			case "Cheque account":
+			case "Saving account":
+				
+				break;
+		
+			default:
+				break;
+		}
+
+		return getAccount( userAccountNumber ).getTotalBalance();
+	} // end method getTotalBalance
+
+	public void passBalance(int bothTypeACNumber){
+		getAccount(bothTypeACNumber)._passBalance();
+	}
 
 	// credit an amount to Account with specified account number
 	public void credit( int userAccountNumber, double amount )
@@ -81,12 +118,25 @@ public class BankDatabase
 		getAccount( userAccountNumber ).credit( amount );
 	} // end method credit
 
+	// debit an amount from of Account with specified account number
+	public void credit( Account userAccount, double amount )
+	{
+		userAccount.credit( amount );
+	} // end method debit
+
 	// debit an amount from of Account with specified account number
 	public void debit( int userAccountNumber, double amount )
 	{
 		getAccount( userAccountNumber ).debit( amount );
 	} // end method debit
 
+	// debit an amount from of Account with specified account number
+	public void debit( Account userAccount, double amount )
+	{
+		userAccount.debit( amount );
+	} // end method debit
+
+	// allows backend to set cheque limit for an account
    	public void setChequeLimit(int userAccountNumber, double amount) {
 
 		// downcasting current account to ChequeAccount for setting limit
@@ -94,21 +144,41 @@ public class BankDatabase
         temp.setLimit(amount);
    	}
 
-	// return user's account tyoe in string
+	// return user's account type in string
 	public String getAccountTypeString(int userAccountNumber) {
 		return getAccount(userAccountNumber).getType();
 	}
 
-	public void setFrequency(int currentAccountNumber, int FreSelection) {
+	// allows backend set the interest rate for an account
+	public void setInterestRate(int currentAccountNumber, int rate) {
 		SavingAccount temp = (SavingAccount) getAccount(currentAccountNumber);
-		temp.setFrequency(FreSelection);
+		temp.setInterestRate(rate);
 	}
 
+	// returns current interest rate to backend
 	public double getCurrentRate(int currentAccountNumber) {
 		SavingAccount temp = (SavingAccount) getAccount(currentAccountNumber);
 		double rate = temp.getInterestRate();
 		return rate;
 	}
+
+	// swap to saving account
+	public SavingAccount swapToSaving(int currentGeneralAC) {
+		SavingAccount temp = getAccount(currentGeneralAC)._swapToSaving();
+		return temp;
+	}
+
+	// swap to chequing account
+	public ChequeAccount swapToChequing(int currentGeneralAC) {
+		ChequeAccount temp = getAccount(currentGeneralAC)._swapToChequing();
+		return temp;
+	}
+
+	// indicates whether the account is swapable
+	public boolean isSwapable(int currentAccountNumber) {
+		boolean flag = getAccount(currentAccountNumber)._isSwapable();
+		return flag;
+	}
 } // end class BankDatabase
 
 
diff --git a/ATMsource/ChequeAccount.java b/ATMsource/ChequeAccount.java
index ea2fee3..fc72e04 100644
--- a/ATMsource/ChequeAccount.java
+++ b/ATMsource/ChequeAccount.java
@@ -13,7 +13,7 @@ public class ChequeAccount extends Account {
         LimitPerCheque = 10000;
     }
 
-    // allows user to set their cheque limit
+    // get method of this class
     public void setLimit(double limit) {
         LimitPerCheque = limit;
     }
diff --git a/ATMsource/Keypad.java b/ATMsource/Keypad.java
index e3a47c7..be27eaa 100644
--- a/ATMsource/Keypad.java
+++ b/ATMsource/Keypad.java
@@ -17,6 +17,10 @@ public class Keypad
 	{		
 		return input.nextInt(); // we assume that user enters an integer  
 	} // end method getInput
+
+	public double getDoubleInput() {
+		return input.nextDouble();
+	}
 } // end class Keypad  
 
 
diff --git a/ATMsource/SavingAccount.java b/ATMsource/SavingAccount.java
index 0fde98b..ca2c3ec 100644
--- a/ATMsource/SavingAccount.java
+++ b/ATMsource/SavingAccount.java
@@ -3,7 +3,6 @@ public class SavingAccount extends Account{
     private double interestRate;
 
     private static final String TYPE = "Saving account";
-    private int FREQUENCY;
 
 
     public SavingAccount(int theAccountNumber, int thePIN, 
@@ -14,12 +13,14 @@ public class SavingAccount extends Account{
         interestRate = 0.001;
     }
 
-    public double getInterestRate() {
-        return interestRate;
+    // set method of this class
+    public void setInterestRate(double rate ) {
+        interestRate = rate;
     }
 
-    public double getFre() {
-        return FREQUENCY;
+    // get method of this class
+    public double getInterestRate() {
+        return interestRate;
     }
 
     // returns account type
@@ -28,7 +29,4 @@ public class SavingAccount extends Account{
         return TYPE;
     }
 
-    public void setFrequency(int freSelection) {
-            FREQUENCY = freSelection;
-    }
 }
diff --git a/ATMsource/SetComFre.java b/ATMsource/SetComFre.java
deleted file mode 100644
index 9e10165..0000000
--- a/ATMsource/SetComFre.java
+++ /dev/null
@@ -1,90 +0,0 @@
-public class SetComFre extends Transaction {
-
-    private Keypad keypad; // reference to keypad
-
-    private BankDatabase bankDatabase; 
-    private Screen screen;
-
-    private static final int CANCEL = 0;
-
-    private static final int ANNUALLY = 1;
-    private static final int HALF = 2;
-    private static final int SEASONAL = 3;
-    private static final int DAILY = 4;
-
-    public SetComFre(int userAccountNumber, Screen atmScreen, 
-    BankDatabase atmBankDatabase, Keypad atmKeypad){
-        super(userAccountNumber, atmScreen, atmBankDatabase);
-
-        keypad = atmKeypad;
-    }
-
-    private int frequencySelection() {
-        screen.displayMessageLine("Please select new compound frequency: ");
-        screen.displayMessageLine("0 - Cancel ");
-        screen.displayMessageLine("1 - Annually ");
-        screen.displayMessageLine("2 - Half-a-year ");
-        screen.displayMessageLine("3 - Seasonal");
-        screen.displayMessageLine("4 - Daily");
-
-        return keypad.getInput();
-
-    }
-    
-    private void setMessage( double nextYearBalance){
-        screen.displayMessageLine(
-            "Compound frequency is set, below is predicted balance in next year: " );
-        System.out.printf("$%.2f", nextYearBalance);
-        //System.out.println("$" + nextYearBalance);
-    }
-
-    @Override
-    public void execute() {
-        bankDatabase = getBankDatabase();
-
-        int currentAccountNumber = getAccountNumber();
-
-        // get references to screen
-        screen = getScreen();
-
-        int setFrequency = frequencySelection();
-
-        double currentBalance = bankDatabase.getTotalBalance(currentAccountNumber);
-        double nextYearBalance;
-        double exponent;
-        double currentRate = bankDatabase.getCurrentRate(currentAccountNumber);
-
-        switch (setFrequency) {
-            case ANNUALLY:
-            case HALF:
-
-                bankDatabase.setFrequency(currentAccountNumber, setFrequency);              
-                exponent = 1 + currentRate/setFrequency ;
-                nextYearBalance = currentBalance * Math.pow(exponent, setFrequency);
-                setMessage(nextYearBalance);
-                break;
-
-            case SEASONAL:
-
-                bankDatabase.setFrequency(currentAccountNumber, setFrequency);
-                exponent = 1 + currentRate/4;
-                nextYearBalance = currentBalance * Math.pow(exponent, 4);
-                setMessage(nextYearBalance);                
-                break;
-
-            case DAILY:
-                bankDatabase.setFrequency(currentAccountNumber, setFrequency);  
-                exponent = 1 + currentRate/365;
-                nextYearBalance = currentBalance * Math.pow(exponent, 365);
-                setMessage(nextYearBalance);
-                break;
-            case CANCEL:
-                screen.displayMessageLine("Canceled.");
-                break;
-            default:
-                screen.displayMessageLine("No such option.");
-                break;
-        }
-    }
-
-}
diff --git a/ATMsource/SetLimit.java b/ATMsource/SetLimit.java
deleted file mode 100644
index c691569..0000000
--- a/ATMsource/SetLimit.java
+++ /dev/null
@@ -1,34 +0,0 @@
-public class SetLimit extends Transaction {
-
-    private Keypad keypad; // reference to keypad
-
-    private BankDatabase bankDatabase; 
-    private Screen screen;
-
-    public SetLimit(int userAccountNumber, Screen atmScreen, 
-    BankDatabase atmBankDatabase, Keypad atmKeypad){
-        super(userAccountNumber, atmScreen, atmBankDatabase);
-
-        keypad = atmKeypad;
-    }
-
-    @Override
-    public void execute() {
-        bankDatabase = getBankDatabase();
-
-        int currentAccountNumber = getAccountNumber();
-
-        // get references to screen
-        screen = getScreen();
-
-        screen.displayMessage("Please enter limit amount: ");
-        int amount = keypad.getInput();
-
-        if (amount <= 0) {
-            screen.displayMessageLine("Amount entered is out of range.");
-        } else {
-            bankDatabase.setChequeLimit(currentAccountNumber, amount);
-        }
-
-    }
-}
diff --git a/ATMsource/Transaction.java b/ATMsource/Transaction.java
index 8d79c29..4242f74 100644
--- a/ATMsource/Transaction.java
+++ b/ATMsource/Transaction.java
@@ -8,6 +8,7 @@ public abstract class Transaction
    private int accountNumber; // indicates account involved
    private Screen screen; // ATM's screen
    private BankDatabase bankDatabase; // account info database
+   private Account account = null;
 
    // Transaction constructor invoked by subclasses using super()
    public Transaction( int userAccountNumber, Screen atmScreen, 
@@ -18,12 +19,27 @@ public abstract class Transaction
       bankDatabase = atmBankDatabase;
    } // end Transaction constructor
 
+   // Transaction constructor invoked by subclasses using super()
+   public Transaction( Account userAccount, Screen atmScreen, 
+      BankDatabase atmBankDatabase )
+   {
+      account = userAccount;
+      screen = atmScreen;
+      bankDatabase = atmBankDatabase;
+   } // end Transaction constructor
+
+
    // return account number 
    public int getAccountNumber()
    {
       return accountNumber; 
    } // end method getAccountNumber
 
+   // return account  
+   public Account getAccount(){
+      return account;
+   }// end method getAccount
+
    // return reference to screen
    public Screen getScreen()
    {
@@ -36,6 +52,11 @@ public abstract class Transaction
       return bankDatabase;
    } // end method getBankDatabase
 
+   // if it is not a compound account, return false
+   public boolean getFlag() {
+      return account != null;
+   }
+
    // perform the transaction (overridden by each subclass)
    abstract public void execute();
 } // end class Transaction
diff --git a/ATMsource/Transfer.java b/ATMsource/Transfer.java
index f5f7f40..60453c1 100644
--- a/ATMsource/Transfer.java
+++ b/ATMsource/Transfer.java
@@ -21,35 +21,63 @@ public class Transfer extends Transaction {
 
         // initialize references to keypad
         keypad = atmKeypad;
+    }
+    //end Transfer constructor
+    public Transfer( Account userAccount, Screen atmScreen, 
+    BankDatabase atmBankDatabase, Keypad atmKeypad )
+    {
+        super( userAccount, atmScreen, atmBankDatabase );
 
-    }//end Transfer constructor
+        keypad = atmKeypad;
+    }
+ 
 
     public boolean isSufficientTransfer(double amount, double available){
         return amount<=available;
     }
 
- 
-    // perform transaction
-    public void execute()
-    {
-        // get references to bank database
-        bankDatabase = getBankDatabase();
+    // transfer method for non-compounded account
+    private void transferNormal(double availableBalance, int accountNumber, Screen screen,Keypad keypad) {
+        //this.keypad = keypad; 
+        
+        screen.displayMessage("Please enter target bank account number: ");
+        target = keypad.getInput();
 
-        int currentAccountNumber = getAccountNumber();
-        double availableBalance = bankDatabase.getAvailableBalance(currentAccountNumber); // amount available for transfer
+        screen.displayMessage("Please enter amount: ");
+        try {
+            amount = keypad.getDoubleInput();
+
+            if (isSufficientTransfer(amount, availableBalance) && bankDatabase.accountExists(target) && target != accountNumber) {
+                bankDatabase.debit(accountNumber, amount);
+                bankDatabase.credit(target, amount);
+            }else{
+                screen.displayMessageLine("Availavle balance is lower than transfer amount or target account unavailable.");
+                screen.displayMessageLine("Progress aborted."); 
+            }
+
+        } catch (Exception e) {
+
+            // to maintain all inputs are integer, fund with cents are not considered
+            screen.displayMessageLine("Input mismatch! In normal mode.");
+            amount = 0;
+        }
+    }
  
-        // get references to screen
-        screen = getScreen();
+    private void transferCompound(double availableBalance, Account subAccount, Screen screen, Keypad keypad){
+        int acNum = subAccount.getAccountNumber();
 
+        // this.keypad = keypad; 
         screen.displayMessage("Please enter target bank account number: ");
         target = keypad.getInput();
 
         screen.displayMessage("Please enter amount: ");
         try {
-            amount = keypad.getInput();
+            amount = keypad.getDoubleInput();
 
-            if (isSufficientTransfer(amount, availableBalance) && bankDatabase.accountExists(target) && target != currentAccountNumber) {
-                bankDatabase.debit(currentAccountNumber, amount);
+            if (isSufficientTransfer(amount, availableBalance) && bankDatabase.accountExists(target) 
+                && target != acNum) {
+
+                bankDatabase.debit(subAccount, amount);
                 bankDatabase.credit(target, amount);
             }else{
                 screen.displayMessageLine("Availavle balance is lower than transfer amount or target account unavailable.");
@@ -58,11 +86,35 @@ public class Transfer extends Transaction {
 
         } catch (Exception e) {
 
-            // to maintain all inputs are integer, fund with cents are not considered
-            screen.displayMessageLine("Input mismatch! No fund will be transfered.");
+            screen.displayMessageLine("Input mismatch! In compoud mode.");
             amount = 0;
         }
 
+    }
+    // perform transaction
+    public void execute()
+    {
+        // get references to bank database
+        bankDatabase = getBankDatabase();
+
+        boolean flag = super.getFlag();
+        Account subAccount = super.getAccount();
+
+        int currentAccountNumber = getAccountNumber();
+        double availableBalance = (subAccount != null)? bankDatabase.getAvailableBalance( getAccount()):
+            bankDatabase.getAvailableBalance( getAccountNumber() );
+ 
+        // get references to screen
+        screen = getScreen();
+
+        //transferCompound(availableBalance, subAccount, screen, keypad);
+
+        if(flag){
+            transferCompound(availableBalance, subAccount, screen, keypad);
+        }else{
+            transferNormal(availableBalance, currentAccountNumber, screen, keypad);
+        }
+
         
     } // end method execute
 
diff --git a/ATMsource/Withdrawal.java b/ATMsource/Withdrawal.java
index b85473d..7d8d4a9 100644
--- a/ATMsource/Withdrawal.java
+++ b/ATMsource/Withdrawal.java
@@ -26,29 +26,54 @@ public class Withdrawal extends Transaction
       cashDispenser = atmCashDispenser;
    } // end Withdrawal constructor
 
+   public Withdrawal( Account userAccount, Screen atmScreen, 
+   BankDatabase atmBankDatabase,Keypad atmKeypad, 
+   CashDispenser atmCashDispenser )
+   {
+      super( userAccount, atmScreen, atmBankDatabase );
+      keypad = atmKeypad;
+      cashDispenser = atmCashDispenser;
+   }
+
+
    // perform transaction
    public void execute()
    {
       boolean cashDispensed = false; // cash was not dispensed yet
-      double availableBalance; // amount available for withdrawal
 
       // get references to bank database and screen
-      BankDatabase bankDatabase = getBankDatabase(); 
+      BankDatabase bankDatabase = getBankDatabase();
       Screen screen = getScreen();
 
+      Account subAccount = super.getAccount();
+
+      double availableBalance = (subAccount != null)? bankDatabase.getAvailableBalance( getAccount()):
+      bankDatabase.getAvailableBalance( getAccountNumber() ); // amount available for withdrawal
+
+      boolean flag = super.getFlag();
+
+      int currentAccountNumber = getAccountNumber();
+
+      do{
+         if (flag) {
+            cashDispensed = compoundWithdraw(availableBalance, subAccount, screen, keypad, bankDatabase, cashDispensed);
+         }else{
+            cashDispensed = normalWithdraw(availableBalance, currentAccountNumber, screen, keypad, bankDatabase, cashDispensed);
+         }
+      }while(!cashDispensed);
+
       // loop until cash is dispensed or the user cancels
-      do
-      {
+   } // end method execute
+
+   private boolean normalWithdraw(double availableBalance, int currentAccountNumber, Screen screen,
+       Keypad keypad_Keypad, BankDatabase database, boolean Dispensed) {
+
          // obtain a chosen withdrawal amount from the user 
          amount = displayMenuOfAmounts();
          
          // check whether user chose a withdrawal amount or canceled
          if ( amount != CANCELED )
          {
-            // get available balance of account involved
-            availableBalance = 
-               bankDatabase.getAvailableBalance( getAccountNumber() );
-      
             // check whether the user has enough money in the account 
             if ( amount <= availableBalance )
             {   
@@ -56,10 +81,10 @@ public class Withdrawal extends Transaction
                if ( cashDispenser.isSufficientCashAvailable( amount ) )
                {
                   // update the account involved to reflect withdrawal
-                  bankDatabase.debit( getAccountNumber(), amount );
+                  database.debit( getAccountNumber(), amount );
                   
                   cashDispenser.dispenseCash( amount ); // dispense cash
-                  cashDispensed = true; // cash was dispensed
+                  Dispensed = true; // cash was dispensed
 
                   // instruct user to take cash
                   screen.displayMessageLine( 
@@ -80,11 +105,54 @@ public class Withdrawal extends Transaction
          else // user chose cancel menu option 
          {
             screen.displayMessageLine( "\nCanceling transaction..." );
-            return; // return to main menu because user canceled
+            //return; // return to main menu because user canceled
          } // end else
-      } while ( !cashDispensed );
+      return Dispensed;
+   }
 
-   } // end method execute
+   private boolean compoundWithdraw(double availableBalance, Account subAccount, Screen screen, Keypad keypad_Keypad, 
+      BankDatabase database, boolean Dispensed) {
+         // obtain a chosen withdrawal amount from the user 
+         amount = displayMenuOfAmounts();
+         
+         // check whether user chose a withdrawal amount or canceled
+         if ( amount != CANCELED )
+         {
+            // check whether the user has enough money in the account 
+            if ( amount <= availableBalance )
+            {   
+               // check whether the cash dispenser has enough money
+               if ( cashDispenser.isSufficientCashAvailable( amount ) )
+               {
+                  // update the account involved to reflect withdrawal
+                  database.debit( subAccount, amount );
+                  
+                  cashDispenser.dispenseCash( amount ); // dispense cash
+                  Dispensed = true; // cash was dispensed
+
+                  // instruct user to take cash
+                  screen.displayMessageLine( 
+                     "\nPlease take your cash now." );
+               } // end if
+               else // cash dispenser does not have enough cash
+                  screen.displayMessageLine( 
+                     "\nInsufficient cash available in the ATM." +
+                     "\n\nPlease choose a smaller amount." );
+            } // end if
+            else // not enough money available in user's account
+            {
+               screen.displayMessageLine( 
+                  "\nInsufficient funds in your account." +
+                  "\n\nPlease choose a smaller amount." );
+            } // end else
+         } // end if
+         else // user chose cancel menu option 
+         {
+            screen.displayMessageLine( "\nCanceling transaction..." );
+            //return; // return to main menu because user canceled
+         } // end else
+      return Dispensed;
+   }
 
    // display a menu of withdrawal amounts and the option to cancel;
    // return the chosen amount or 0 if the user chooses to cancel
diff --git a/ATMsource/cp/ATM.class b/ATMsource/cp/ATM.class
index 7393661..3e0e831 100644
Binary files a/ATMsource/cp/ATM.class and b/ATMsource/cp/ATM.class differ
diff --git a/ATMsource/cp/Account.class b/ATMsource/cp/Account.class
index b1cbd00..2e6a92a 100644
Binary files a/ATMsource/cp/Account.class and b/ATMsource/cp/Account.class differ
diff --git a/ATMsource/cp/BalanceInquiry.class b/ATMsource/cp/BalanceInquiry.class
index 22dcf74..6417078 100644
Binary files a/ATMsource/cp/BalanceInquiry.class and b/ATMsource/cp/BalanceInquiry.class differ
diff --git a/ATMsource/cp/BankDatabase.class b/ATMsource/cp/BankDatabase.class
index b55de8e..3b86f09 100644
Binary files a/ATMsource/cp/BankDatabase.class and b/ATMsource/cp/BankDatabase.class differ
diff --git a/ATMsource/cp/Keypad.class b/ATMsource/cp/Keypad.class
index 1dffdb0..71232bc 100644
Binary files a/ATMsource/cp/Keypad.class and b/ATMsource/cp/Keypad.class differ
diff --git a/ATMsource/cp/Transaction.class b/ATMsource/cp/Transaction.class
index 70a3b36..d7cc9a4 100644
Binary files a/ATMsource/cp/Transaction.class and b/ATMsource/cp/Transaction.class differ
diff --git a/ATMsource/cp/Transfer.class b/ATMsource/cp/Transfer.class
index 07624bd..2379306 100644
Binary files a/ATMsource/cp/Transfer.class and b/ATMsource/cp/Transfer.class differ
diff --git a/ATMsource/cp/Withdrawal.class b/ATMsource/cp/Withdrawal.class
index 797c5f3..f95dfb4 100644
Binary files a/ATMsource/cp/Withdrawal.class and b/ATMsource/cp/Withdrawal.class differ
diff --git a/ATMsource/cp/savingAccount.class b/ATMsource/cp/savingAccount.class
index 9a32855..905a04c 100644
Binary files a/ATMsource/cp/savingAccount.class and b/ATMsource/cp/savingAccount.class differ
diff --git a/ATMsource/diff5.txt b/ATMsource/diff5.txt
deleted file mode 100644
index e9d9b77..0000000
--- a/ATMsource/diff5.txt
+++ /dev/null
@@ -1,886 +0,0 @@
-diff --git a/ATMsource/ATM.java b/ATMsource/ATM.java
-index 17143c4..11c542e 100644
---- a/ATMsource/ATM.java
-+++ b/ATMsource/ATM.java
-@@ -3,159 +3,247 @@
- 
- public class ATM 
- {
--   private boolean userAuthenticated; // whether user is authenticated
--   private int currentAccountNumber; // current user's account number
--   private Screen screen; // ATM's screen
--   private Keypad keypad; // ATM's keypad
--   private CashDispenser cashDispenser; // ATM's cash dispenser
--   //private DepositSlot depositSlot; // ATM's deposit slot
--   private BankDatabase bankDatabase; // account information database
--
--   // constants corresponding to main menu options
--   private static final int BALANCE_INQUIRY = 1;
--   private static final int WITHDRAWAL = 2;
--   // private static final int DEPOSIT = 3;
--   
--   // added new main menu option
--   private static final int TRANSFER = 3;
--   // changed to last option 5
--   private static final int EXIT = 4;
-+    private boolean userAuthenticated; // whether user is authenticated
-+    private int currentAccountNumber; // current user's account number
-+    private Screen screen; // ATM's screen
-+    private Keypad keypad; // ATM's keypad
-+    private CashDispenser cashDispenser; // ATM's cash dispenser
-+    //private DepositSlot depositSlot; // ATM's deposit slot
-+    private BankDatabase bankDatabase; // account information database
-+
-+    // constants corresponding to main menu options
-+    private static final int BALANCE_INQUIRY = 1;
-+    private static final int WITHDRAWAL = 2;
-+    // private static final int DEPOSIT = 3;
-+    
-+    // added new main menu option
-+    private static final int TRANSFER = 3;
-+
-+    // fourth option of different account types are,
-+    // saving account: set compund frequency
-+    // chequing account: set cheque limit
-+    // general accout: exit
-+    private static final int FORTH_OPTION = 4;
-+
-+    // exit option for cheque and saving account
-+    private static final int EXIT = 5;
- 
--  
-+    // used as switch option
-+    private final String GENERALTYPE = "General account";
-+    private final String SAVINGTYPE = "Saving account";
-+    private final String CHEQUEINGTYPE = "Cheque account";
- 
- 
-    // no-argument ATM constructor initializes instance variables
--   public ATM() 
--   {
--      userAuthenticated = false; // user is not authenticated to start
--      currentAccountNumber = 0; // no current account number to start
--      screen = new Screen(); // create screen
--      keypad = new Keypad(); // create keypad 
--      cashDispenser = new CashDispenser(); // create cash dispenser
--      //depositSlot = new DepositSlot(); // create deposit slot
--      bankDatabase = new BankDatabase(); // create acct info database
--   } // end no-argument ATM constructor
--
--   // start ATM 
--   public void run()
--   {
--      // welcome and authenticate user; perform transactions
--      while ( true )
--      {
--         // loop while user is not yet authenticated
--         while ( !userAuthenticated ) 
--         {
--            screen.displayMessageLine( "\nWelcome!" );       
--            authenticateUser(); // authenticate user
--         } // end while
-+    public ATM() 
-+    {
-+        userAuthenticated = false; // user is not authenticated to start
-+        currentAccountNumber = 0; // no current account number to start
-+        screen = new Screen(); // create screen
-+        keypad = new Keypad(); // create keypad 
-+        cashDispenser = new CashDispenser(); // create cash dispenser
-+        //depositSlot = new DepositSlot(); // create deposit slot
-+        bankDatabase = new BankDatabase(); // create acct info database
-+    } // end no-argument ATM constructor
-+
-+    // start ATM 
-+    public void run()
-+    {
-+        // welcome and authenticate user; perform transactions
-+        while ( true )
-+        {
-+            // loop while user is not yet authenticated
-+            while ( !userAuthenticated ) 
-+            {
-+                screen.displayMessageLine( "\nWelcome!" );       
-+                authenticateUser(); // authenticate user
-+            } // end while
-          
--         performTransactions(); // user is now authenticated 
--         userAuthenticated = false; // reset before next ATM session
--         currentAccountNumber = 0; // reset before next ATM session 
--         screen.displayMessageLine( "\nThank you! Goodbye!" );
--      } // end while   
--   } // end method run
--
--   // attempts to authenticate user against database
--   private void authenticateUser() 
--   {
--      screen.displayMessage( "\nPlease enter your account number: " );
--      int accountNumber = keypad.getInput(); // input account number
--      screen.displayMessage( "\nEnter your PIN: " ); // prompt for PIN
--      int pin = keypad.getInput(); // input PIN
--      
--      // set userAuthenticated to boolean value returned by database
--      userAuthenticated = 
--         bankDatabase.authenticateUser( accountNumber, pin );
--      
--      // check whether authentication succeeded
--      if ( userAuthenticated )
--      {
--         currentAccountNumber = accountNumber; // save user's account #
--      } // end if
--      else
--         screen.displayMessageLine( 
--             "Invalid account number or PIN. Please try again." );
--   } // end method authenticateUser
--
--   // display the main menu and perform transactions
--   private void performTransactions() 
--   {
--      // local variable to store transaction currently being processed
--      Transaction currentTransaction = null;
-+            performTransactions(); // user is now authenticated 
-+            userAuthenticated = false; // reset before next ATM session
-+            currentAccountNumber = 0; // reset before next ATM session 
-+            screen.displayMessageLine( "\nThank you! Goodbye!" );
-+        } // end while   
-+    } // end method run
-+
-+    // attempts to authenticate user against database
-+    private void authenticateUser() 
-+    {
-+        screen.displayMessage( "\nPlease enter your account number: " );
-+        int accountNumber = keypad.getInput(); // input account number
-+        screen.displayMessage( "\nEnter your PIN: " ); // prompt for PIN
-+        int pin = keypad.getInput(); // input PIN
-+        
-+        // set userAuthenticated to boolean value returned by database
-+        userAuthenticated = 
-+            bankDatabase.authenticateUser( accountNumber, pin );
-+        
-+        // check whether authentication succeeded
-+        if ( userAuthenticated )
-+        {
-+            currentAccountNumber = accountNumber; // save user's account #
-+        } // end if
-+        else
-+            screen.displayMessageLine( 
-+                "Invalid account number or PIN. Please try again." );
-+    } // end method authenticateUser
-+
-+    private boolean transactions(int mainMenuSelection, String ACtype) {
-+
-+        Transaction currentTransaction = null;
-+
-+        boolean exitSignal = false;
-+
-+        while (!exitSignal ) {
-+
-+            switch ( mainMenuSelection )
-+            {
-+                // user chose to perform one of three transaction types
-+                case BALANCE_INQUIRY: 
-+                case WITHDRAWAL: 
-+                //case DEPOSIT:
-+                case TRANSFER:
-+                case FORTH_OPTION:
-+
-+                    // initialize as new object of chosen type
-+                    currentTransaction = 
-+                        createTransaction( mainMenuSelection, ACtype );
-+
-+                    if (currentTransaction != null) {
-+                        currentTransaction.execute(); // execute transaction when is not exit signal of general account    
-+                    }
-+                    return exitSignal;
-+                    //break;
-+                case EXIT: // user chose to terminate session
-+                    screen.displayMessageLine( "\nExiting the system..." );
-+                    exitSignal = true; // this ATM session should end
-+                    return exitSignal;
-+
-+                    //break;
-+                default: // user did not enter an integer from 1-4
-+                    screen.displayMessageLine( 
-+                    "\nYou did not enter a valid selection. Try again." );
-+                    return exitSignal;
-+                    //break;
-+            }   // end switch
-+        }
-+        return exitSignal;
-+    }
-+
-+    // display the main menu and perform transactions    
-+    private void performTransactions(){
-+
-+        // Transaction currentTransaction = null;
-       
--      boolean userExited = false; // user has not chosen to exit
--
--      // loop while user has not chosen option to exit system
--      while ( !userExited )
--      {     
--         // show main menu and get user selection
--         int mainMenuSelection = displayMainMenu();
--
--         // decide how to proceed based on user's menu selection
--         switch ( mainMenuSelection )
--         {
--            // user chose to perform one of three transaction types
--            case BALANCE_INQUIRY: 
--            case WITHDRAWAL: 
--            //case DEPOSIT:
--            case TRANSFER:
--
--               // initialize as new object of chosen type
--               currentTransaction = 
--                  createTransaction( mainMenuSelection );
--
--               currentTransaction.execute(); // execute transaction
--               break; 
--            case EXIT: // user chose to terminate session
--               screen.displayMessageLine( "\nExiting the system..." );
--               userExited = true; // this ATM session should end
--               break;
--            default: // user did not enter an integer from 1-4
--               screen.displayMessageLine( 
--                  "\nYou did not enter a valid selection. Try again." );
--               break;
--         } // end switch
--      } // end while
--   } // end method performTransactions
-+        boolean userExited = false; // user has not chosen to exit
-+
-+        //int mainMenuSelection = displayMainMenu();
-+
-+        String type = bankDatabase.getAccountTypeString(currentAccountNumber);
-+
-+        while (!userExited) {
-+            int mainMenuSelection = displayMainMenu();
-+
-+            userExited = transactions(mainMenuSelection, type);
-+        }
-+    }
-    
--   // display the main menu and return an input selection
--   private int displayMainMenu()
--   {
--      screen.displayMessageLine( "\nMain menu:" );
--      screen.displayMessageLine( "1 - View my balance" );
--      screen.displayMessageLine( "2 - Withdraw cash" );
--      screen.displayMessageLine( "3 - Transfer funds" );
--      screen.displayMessageLine( "4 - Exit\n" );
--      screen.displayMessage( "Enter a choice: " );
--      return keypad.getInput(); // return user's selection
--   } // end method displayMainMenu
-+    // display the main menu and return an input selection
-+    private int displayMainMenu()
-+    {
-+        String type = bankDatabase.getAccountTypeString(currentAccountNumber);
-+
-+        int selection = 0;
-+
-+        // showing which type of current account
-+        screen.displayMessageLine("\nYour account type is: " + type);
-+
-+        switch (type) {
-+            case SAVINGTYPE:
-+                displayMainMenuSaving();
-+                selection = keypad.getInput();// return user's selection
-+                break;
-+            case CHEQUEINGTYPE:
-+                displayMainMenuCheque();
-+                selection = keypad.getInput();// return user's selection
-+                break;
-+            case GENERALTYPE:
-+                displayMainMenuGeneral();
-+                selection = keypad.getInput();// return user's selection
-+                break;
-+        }
-+        
-+        return selection;
-+    } // end method displayMainMenu
-+
-+    // menu for general account
-+    private void displayMainMenuGeneral() {
-+        screen.displayMessageLine( "\nMain menu:" );
-+        screen.displayMessageLine( "1 - View my balance" );
-+        screen.displayMessageLine( "2 - Withdraw cash" );
-+        screen.displayMessageLine( "3 - Transfer funds" );
-+        screen.displayMessageLine( "4 - Exit\n" );
-+
-+        screen.displayMessageLine("Please enter your choice: ");
-+    }
-+
-+    // menu for saving account
-+    private void displayMainMenuSaving() {
-+        screen.displayMessageLine( "\nMain menu:" );
-+        screen.displayMessageLine( "1 - View my balance" );
-+        screen.displayMessageLine( "2 - Withdraw cash" );
-+        screen.displayMessageLine( "3 - Transfer funds" );
-+        screen.displayMessageLine( "4 - Set Compound Frequency" );
-+        screen.displayMessageLine( "5 - Exit\n" );
-+        screen.displayMessageLine("Please enter your choice: ");
-+
-+    }
-+
-+    // menu for chequeing account
-+    private void displayMainMenuCheque() {
-+        screen.displayMessageLine( "\nMain menu:" );
-+        screen.displayMessageLine( "1 - View my balance" );
-+        screen.displayMessageLine( "2 - Withdraw cash" );
-+        screen.displayMessageLine( "3 - Transfer funds" );
-+        screen.displayMessageLine( "4 - Set cheque limit" );
-+        screen.displayMessageLine( "5 - Exit\n" );
-+
-+        screen.displayMessageLine("Please enter your choice: ");
-+    }
-          
-    // return object of specified Transaction subclass
--   private Transaction createTransaction( int type )
--   {
--      Transaction temp = null; // temporary Transaction variable
--      
--      // determine which type of Transaction to create     
--      switch ( type )
--      {
--         case BALANCE_INQUIRY: // create new BalanceInquiry transaction
--            temp = new BalanceInquiry( 
--               currentAccountNumber, screen, bankDatabase );
--            break;
--         case WITHDRAWAL: // create new Withdrawal transaction
--            temp = new Withdrawal( currentAccountNumber, screen, 
--               bankDatabase, keypad, cashDispenser );
--            break; 
--         case TRANSFER: // create new Deposit transaction
--            temp = new Transfer( currentAccountNumber, screen, 
--               bankDatabase, keypad);
--            break;
--
--      } // end switch
-+    private Transaction createTransaction( int type , String ACType)
-+    {
-+        Transaction temp = null; // temporary Transaction variable
-+        
-+        // determine which type of Transaction to create     
-+        switch ( type )
-+        {
-+            case BALANCE_INQUIRY: // create new BalanceInquiry transaction
-+                temp = new BalanceInquiry( 
-+                currentAccountNumber, screen, bankDatabase );
-+                break;
-+            case WITHDRAWAL: // create new Withdrawal transaction
-+                temp = new Withdrawal( currentAccountNumber, screen, 
-+                bankDatabase, keypad, cashDispenser );
-+                break; 
-+            case TRANSFER: // create new Deposit transaction
-+                temp = new Transfer( currentAccountNumber, screen, 
-+                bankDatabase, keypad);
-+                break;
-+            case FORTH_OPTION:
-+                if (ACType == SAVINGTYPE) {
-+                    temp = new SetComFre(currentAccountNumber, screen, bankDatabase, keypad);
-+                }
-+                if (ACType == CHEQUEINGTYPE) {
-+                    temp = new SetLimit(currentAccountNumber, screen, bankDatabase, keypad);
-+                }else{
-+                    break;
-+                }
-+        } // end switch
- 
-       return temp; // return the newly created object
--   } // end method createTransaction
-+    } // end method createTransaction
- } // end class ATM
- 
- 
-diff --git a/ATMsource/Account.java b/ATMsource/Account.java
-index c308eca..3c0bbf3 100644
---- a/ATMsource/Account.java
-+++ b/ATMsource/Account.java
-@@ -3,60 +3,68 @@
- 
- public class Account 
- {
--   private int accountNumber; // account number
--   private int pin; // PIN for authentication
--   private double availableBalance; // funds available for withdrawal
--   private double totalBalance; // funds available + pending deposits
-+	private int accountNumber; // account number
-+	private int pin; // PIN for authentication
-+	private double availableBalance; // funds available for withdrawal
-+	private double totalBalance; // funds available + pending deposits
- 
--   // Account constructor initializes attributes
--   public Account( int theAccountNumber, int thePIN, 
--      double theAvailableBalance, double theTotalBalance )
--   {
--      accountNumber = theAccountNumber;
--      pin = thePIN;
--      availableBalance = theAvailableBalance;
--      totalBalance = theTotalBalance;
--   } // end Account constructor
-+	// we assume existing accounts remain it original type, until the owner requests for changing
-+	private static final String TYPE = "General account";
- 
--   // determines whether a user-specified PIN matches PIN in Account
--   public boolean validatePIN( int userPIN )
--   {
--      if ( userPIN == pin )
--         return true;
--      else
--         return false;
--   } // end method validatePIN
--   
--   // returns available balance
--   public double getAvailableBalance()
--   {
--      return availableBalance;
--   } // end getAvailableBalance
-+	// Account constructor initializes attributes
-+	public Account( int theAccountNumber, int thePIN, 
-+		double theAvailableBalance, double theTotalBalance )
-+	{
-+		accountNumber = theAccountNumber;
-+		pin = thePIN;
-+		availableBalance = theAvailableBalance;
-+		totalBalance = theTotalBalance;
-+	} // end Account constructor
- 
--   // returns the total balance
--   public double getTotalBalance()
--   {
--      return totalBalance;
--   } // end method getTotalBalance
-+	// determines whether a user-specified PIN matches PIN in Account
-+	public boolean validatePIN( int userPIN )
-+	{
-+		if ( userPIN == pin )
-+			return true;
-+		else
-+			return false;
-+	} // end method validatePIN
-+	
-+	// returns available balance
-+	public double getAvailableBalance()
-+	{
-+		return availableBalance;
-+	} // end getAvailableBalance
- 
--   // credits an amount to the account
--   public void credit( double amount )
--   {
--      totalBalance += amount; // add to total balance
--   } // end method credit
-+	// returns the total balance
-+	public double getTotalBalance()
-+	{
-+		return totalBalance;
-+	} // end method getTotalBalance
- 
--   // debits an amount from the account
--   public void debit( double amount )
--   {
--      availableBalance -= amount; // subtract from available balance
--      totalBalance -= amount; // subtract from total balance
--   } // end method debit
-+	// credits an amount to the account
-+	public void credit( double amount )
-+	{
-+		totalBalance += amount; // add to total balance
-+	} // end method credit
- 
--   // returns account number
--   public int getAccountNumber()
--   {
--      return accountNumber;  
--   } // end method getAccountNumber
-+	// debits an amount from the account
-+	public void debit( double amount )
-+	{
-+		availableBalance -= amount; // subtract from available balance
-+		totalBalance -= amount; // subtract from total balance
-+	} // end method debit
-+
-+	// returns account number
-+	public int getAccountNumber()
-+	{
-+		return accountNumber;  
-+	} // end method getAccountNumber
-+
-+	// returns account type
-+	public String getType() {
-+		return TYPE; 
-+	}
- } // end class Account
- 
- 
-diff --git a/ATMsource/BankDatabase.java b/ATMsource/BankDatabase.java
-index dab337b..936fc36 100644
---- a/ATMsource/BankDatabase.java
-+++ b/ATMsource/BankDatabase.java
-@@ -1,89 +1,114 @@
-+
- // BankDatabase.java
- // Represents the bank account information database 
- 
- public class BankDatabase
- {
--   private Account accounts[]; // array of Accounts
--   
--   // no-argument BankDatabase constructor initializes accounts
--   public BankDatabase()
--   {
--      accounts = new Account[ 4 ]; // just 2 accounts for testing
--      accounts[ 0 ] = new Account( 12345, 54321, 1000.0, 1200.0 );
--      accounts[ 1 ] = new Account( 98765, 56789, 200.0, 200.0 );
--
--      // new accounts of checque account and saving account
--      accounts[ 2 ] = new ChecqueAccount(23456, 65432, 500, 1000);
--      accounts[ 3 ] = new SavingAccount(34567, 76543, 2000, 2500); 
--   } // end no-argument BankDatabase constructor
--   
--   // retrieve Account object containing specified account number
--   private Account getAccount( int accountNumber )
--   {
--      // loop through accounts searching for matching account number
--      for ( Account currentAccount : accounts )
--      {
--         // return current account if match found
--         if ( currentAccount.getAccountNumber() == accountNumber )
--            return currentAccount;
--      } // end for
--
--      return null; // if no matching account was found, return null
--   } // end method getAccount
--
--   // determine whether user-specified account number and PIN match
--   // those of an account in the database
--   public boolean authenticateUser( int userAccountNumber, int userPIN )
--   {
--      // attempt to retrieve the account with the account number
--      Account userAccount = getAccount( userAccountNumber );
--
--      // if account exists, return result of Account method validatePIN
--      if ( userAccount != null )
--         return userAccount.validatePIN( userPIN );
--      else
--         return false; // account number not found, so return false
--   } // end method authenticateUser
--
--   // to check whether the account is exists in the database
--   public boolean accountExists(int ACnumber){
--
--      int acFound = 0;
--
--      // loop through accounts searching for matching account number
--      for ( Account currentAccount : accounts )
--      {
--         if(currentAccount.getAccountNumber() == ACnumber)
--            acFound += 1;
--      } // end for
--
--      // return true when only one account is matched with ACnumber
--      return acFound==1;
--
--   }
--   // return available balance of Account with specified account number
--   public double getAvailableBalance( int userAccountNumber )
--   {
--      return getAccount( userAccountNumber ).getAvailableBalance();
--   } // end method getAvailableBalance
--
--   // return total balance of Account with specified account number
--   public double getTotalBalance( int userAccountNumber )
--   {
--      return getAccount( userAccountNumber ).getTotalBalance();
--   } // end method getTotalBalance
--
--   // credit an amount to Account with specified account number
--   public void credit( int userAccountNumber, double amount )
--   {
--      getAccount( userAccountNumber ).credit( amount );
--   } // end method credit
--
--   // debit an amount from of Account with specified account number
--   public void debit( int userAccountNumber, double amount )
--   {
--      getAccount( userAccountNumber ).debit( amount );
--   } // end method debit
-+	private Account accounts[]; // array of Accounts
-+	
-+	// no-argument BankDatabase constructor initializes accounts
-+	public BankDatabase()
-+	{
-+		accounts = new Account[ 4 ]; // just 2 accounts for default testing, and 2 for account types testing
-+		accounts[ 0 ] = new Account( 12345, 54321, 1000.0, 1200.0 );
-+		accounts[ 1 ] = new Account( 98765, 56789, 200.0, 200.0 );
-+
-+		// new accounts of checque account and saving account
-+		accounts[ 2 ] = new ChequeAccount(2, 2, 500, 1000);
-+		accounts[ 3 ] = new SavingAccount(3, 3, 2000, 2500); 
-+
-+	} // end no-argument BankDatabase constructor
-+	
-+	// retrieve Account object containing specified account number
-+	private Account getAccount( int accountNumber )
-+	{
-+		// loop through accounts searching for matching account number
-+		for ( Account currentAccount : accounts )
-+		{
-+			// return current account if match found
-+			if ( currentAccount.getAccountNumber() == accountNumber )
-+				return currentAccount;
-+		} // end for
-+
-+		return null; // if no matching account was found, return null
-+	} // end method getAccount
-+
-+	// determine whether user-specified account number and PIN match
-+	// those of an account in the database
-+	public boolean authenticateUser( int userAccountNumber, int userPIN )
-+	{
-+		// attempt to retrieve the account with the account number
-+		Account userAccount = getAccount( userAccountNumber );
-+
-+		// if account exists, return result of Account method validatePIN
-+		if ( userAccount != null )
-+			return userAccount.validatePIN( userPIN );
-+		else
-+			return false; // account number not found, so return false
-+	} // end method authenticateUser
-+
-+	// to check whether the account is exists in the database
-+	public boolean accountExists(int ACnumber){
-+
-+		int acFound = 0;
-+
-+		// loop through accounts searching for matching account number
-+		for ( Account currentAccount : accounts )
-+		{
-+			if(currentAccount.getAccountNumber() == ACnumber)
-+				acFound += 1;
-+		} // end for
-+
-+		// return true when only one account is matched with ACnumber
-+		return acFound==1;
-+
-+	}
-+	// return available balance of Account with specified account number
-+	public double getAvailableBalance( int userAccountNumber )
-+	{
-+		return getAccount( userAccountNumber ).getAvailableBalance();
-+	} // end method getAvailableBalance
-+
-+	// return total balance of Account with specified account number
-+	public double getTotalBalance( int userAccountNumber )
-+	{
-+		return getAccount( userAccountNumber ).getTotalBalance();
-+	} // end method getTotalBalance
-+
-+	// credit an amount to Account with specified account number
-+	public void credit( int userAccountNumber, double amount )
-+	{
-+		getAccount( userAccountNumber ).credit( amount );
-+	} // end method credit
-+
-+	// debit an amount from of Account with specified account number
-+	public void debit( int userAccountNumber, double amount )
-+	{
-+		getAccount( userAccountNumber ).debit( amount );
-+	} // end method debit
-+
-+   	public void setChequeLimit(int userAccountNumber, double amount) {
-+
-+		// downcasting current account to ChequeAccount for setting limit
-+		ChequeAccount temp = (ChequeAccount) getAccount(userAccountNumber);
-+        temp.setLimit(amount);
-+   	}
-+
-+	// return user's account tyoe in string
-+	public String getAccountTypeString(int userAccountNumber) {
-+		return getAccount(userAccountNumber).getType();
-+	}
-+
-+	public void setFrequency(int currentAccountNumber, int FreSelection) {
-+		SavingAccount temp = (SavingAccount) getAccount(currentAccountNumber);
-+		temp.setFrequency(FreSelection);
-+	}
-+
-+	public double getCurrentRate(int currentAccountNumber) {
-+		SavingAccount temp = (SavingAccount) getAccount(currentAccountNumber);
-+		double rate = temp.getInterestRate();
-+		return rate;
-+	}
- } // end class BankDatabase
- 
- 
-diff --git a/ATMsource/ChecqueAccount.java b/ATMsource/ChecqueAccount.java
-deleted file mode 100644
-index d65fab1..0000000
---- a/ATMsource/ChecqueAccount.java
-+++ /dev/null
-@@ -1,19 +0,0 @@
--public class ChecqueAccount extends Account {
--
--    private double LimitPerCheque;
--
--    public ChecqueAccount(int theAccountNumber, int thePIN, 
--    double theAvailableBalance, double theTotalBalance) {
--        
--        super(theAccountNumber, thePIN, theAvailableBalance, theTotalBalance);
--        LimitPerCheque = 10000;
--    }
--
--    public void setLimit(double limit) {
--        LimitPerCheque = limit;
--    }
--
--    public double getLimit(){
--        return LimitPerCheque;
--    }
--}
-diff --git a/ATMsource/Keypad.java b/ATMsource/Keypad.java
-index cd035c7..e3a47c7 100644
---- a/ATMsource/Keypad.java
-+++ b/ATMsource/Keypad.java
-@@ -4,19 +4,19 @@ import java.util.Scanner; // program uses Scanner to obtain user input
- 
- public class Keypad
- {
--   private Scanner input; // reads data from the command line
--                         
--   // no-argument constructor initializes the Scanner
--   public Keypad()
--   {
--      input = new Scanner( System.in );    
--   } // end no-argument Keypad constructor
-+	private Scanner input; // reads data from the command line
-+							
-+	// no-argument constructor initializes the Scanner
-+	public Keypad()
-+	{
-+		input = new Scanner( System.in );    
-+	} // end no-argument Keypad constructor
- 
--   // return an integer value entered by user 
--   public int getInput()
--   {
--      return input.nextInt(); // we assume that user enters an integer  
--   } // end method getInput
-+	// return an integer value entered by user 
-+	public int getInput()
-+	{		
-+		return input.nextInt(); // we assume that user enters an integer  
-+	} // end method getInput
- } // end class Keypad  
- 
- 
-diff --git a/ATMsource/SavingAccount.java b/ATMsource/SavingAccount.java
-index a334429..0fde98b 100644
---- a/ATMsource/SavingAccount.java
-+++ b/ATMsource/SavingAccount.java
-@@ -2,6 +2,10 @@ public class SavingAccount extends Account{
- 
-     private double interestRate;
- 
-+    private static final String TYPE = "Saving account";
-+    private int FREQUENCY;
-+
-+
-     public SavingAccount(int theAccountNumber, int thePIN, 
-     double theAvailableBalance, double theTotalBalance){
- 
-@@ -10,11 +14,21 @@ public class SavingAccount extends Account{
-         interestRate = 0.001;
-     }
- 
--    public void setInterestRate(double rate) {
--        interestRate = rate;
--    }
--
-     public double getInterestRate() {
-         return interestRate;
-     }
-+
-+    public double getFre() {
-+        return FREQUENCY;
-+    }
-+
-+    // returns account type
-+    @Override
-+    public String getType() {
-+        return TYPE;
-+    }
-+
-+    public void setFrequency(int freSelection) {
-+            FREQUENCY = freSelection;
-+    }
- }
-diff --git a/ATMsource/Transaction.java b/ATMsource/Transaction.java
-index 508fea8..8d79c29 100644
---- a/ATMsource/Transaction.java
-+++ b/ATMsource/Transaction.java
-@@ -1,6 +1,8 @@
- // Transaction.java
- // Abstract superclass Transaction represents an ATM transaction
- 
-+//import java.lang.Math;
-+
- public abstract class Transaction
- {
-    private int accountNumber; // indicates account involved
-diff --git a/ATMsource/Transfer.java b/ATMsource/Transfer.java
-index b70dc59..2fa53c7 100644
---- a/ATMsource/Transfer.java
-+++ b/ATMsource/Transfer.java
-@@ -45,13 +45,21 @@ public class Transfer extends Transaction {
-         target = keypad.getInput();
- 
-         screen.displayMessage("Please enter amount: ");
--        amount = keypad.getInput();
-+        try {
-+            amount = keypad.getInput();
- 
--       if (isSufficientTransfer(amount, availableBalance) && bankDatabase.accountExists(target) && target != currentAccountNumber) {
-+        } catch (Exception e) {
-+
-+            // to maintain all inputs are integer, fund with cents are not considered
-+            screen.displayMessageLine("Input mismatch! $0 will be transfered.");
-+            amount = 0;
-+        }
-+
-+        if (isSufficientTransfer(amount, availableBalance) && bankDatabase.accountExists(target) && target != currentAccountNumber) {
-             
-             bankDatabase.debit(currentAccountNumber, amount);
-             bankDatabase.credit(target, amount);
--       }else{
-+        }else{  
- 
-             screen.displayMessageLine("Availavle balance is lower than transfer amount or target account unavailable.");
-             screen.displayMessageLine("Progress aborted."); 
-diff --git a/ATMsource/cp/ATM.class b/ATMsource/cp/ATM.class
-index 8be722f..7393661 100644
-Binary files a/ATMsource/cp/ATM.class and b/ATMsource/cp/ATM.class differ
-diff --git a/ATMsource/cp/Account.class b/ATMsource/cp/Account.class
-index d6f406c..b1cbd00 100644
-Binary files a/ATMsource/cp/Account.class and b/ATMsource/cp/Account.class differ
-diff --git a/ATMsource/cp/BankDatabase.class b/ATMsource/cp/BankDatabase.class
-index 3349273..b55de8e 100644
-Binary files a/ATMsource/cp/BankDatabase.class and b/ATMsource/cp/BankDatabase.class differ
-diff --git a/ATMsource/cp/CashDispenser.class b/ATMsource/cp/CashDispenser.class
-index aa7c0c9..5ea19b5 100644
-Binary files a/ATMsource/cp/CashDispenser.class and b/ATMsource/cp/CashDispenser.class differ
-diff --git a/ATMsource/cp/Transaction.class b/ATMsource/cp/Transaction.class
-index f8b658d..70a3b36 100644
-Binary files a/ATMsource/cp/Transaction.class and b/ATMsource/cp/Transaction.class differ
-diff --git a/ATMsource/cp/Transfer.class b/ATMsource/cp/Transfer.class
-index 89cc4e2..07624bd 100644
-Binary files a/ATMsource/cp/Transfer.class and b/ATMsource/cp/Transfer.class differ
-diff --git a/ATMsource/cp/Withdrawal.class b/ATMsource/cp/Withdrawal.class
-index 39fb9eb..797c5f3 100644
-Binary files a/ATMsource/cp/Withdrawal.class and b/ATMsource/cp/Withdrawal.class differ
-diff --git a/ATMsource/cp/checqueAccount.class b/ATMsource/cp/checqueAccount.class
-index 37c81f0..94360f1 100644
-Binary files a/ATMsource/cp/checqueAccount.class and b/ATMsource/cp/checqueAccount.class differ
-diff --git a/ATMsource/cp/savingAccount.class b/ATMsource/cp/savingAccount.class
-index 0c9122b..9a32855 100644
-Binary files a/ATMsource/cp/savingAccount.class and b/ATMsource/cp/savingAccount.class differ
diff --git a/GP.mdj b/GP.mdj
index c96623e..4e77485 100644
--- a/GP.mdj
+++ b/GP.mdj
@@ -48,7 +48,7 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 2780.6044921875,
+											"left": 2828.6044921875,
 											"top": 2384,
 											"height": 13
 										},
@@ -59,9 +59,9 @@
 												"$ref": "AAAAAAF8vDW/8g3HS7g="
 											},
 											"font": "Arial;13;1",
-											"left": 1493,
+											"left": 1517,
 											"top": 1391,
-											"width": 696.76953125,
+											"width": 738.46728515625,
 											"height": 13,
 											"text": "savingAccount"
 										},
@@ -73,7 +73,7 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 2780.6044921875,
+											"left": 2828.6044921875,
 											"top": 2384,
 											"width": 80.68505859375,
 											"height": 13,
@@ -87,16 +87,16 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 2780.6044921875,
+											"left": 2828.6044921875,
 											"top": 2384,
 											"height": 13,
 											"horizontalAlignment": 1
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 1488,
+									"left": 1512,
 									"top": 1384,
-									"width": 706.76953125,
+									"width": 748.46728515625,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8vDW/8g3IKAk="
@@ -131,9 +131,9 @@
 												"$ref": "AAAAAAF8vDXyjg3uJh0="
 											},
 											"font": "Arial;13;0",
-											"left": 1493,
+											"left": 1517,
 											"top": 1414,
-											"width": 696.76953125,
+											"width": 738.46728515625,
 											"height": 13,
 											"text": "#interestRate: double",
 											"horizontalAlignment": 0
@@ -148,9 +148,9 @@
 												"$ref": "AAAAAAF8wQaT4HBtVRM="
 											},
 											"font": "Arial;13;0",
-											"left": 1493,
+											"left": 1517,
 											"top": 1429,
-											"width": 696.76953125,
+											"width": 738.46728515625,
 											"height": 13,
 											"underline": true,
 											"text": "-TYPE: String",
@@ -166,18 +166,18 @@
 												"$ref": "AAAAAAF8wQblTHB0kQ4="
 											},
 											"font": "Arial;13;0",
-											"left": 1493,
+											"left": 1517,
 											"top": 1444,
-											"width": 696.76953125,
+											"width": 738.46728515625,
 											"height": 13,
 											"text": "-FREQUENCY: int",
 											"horizontalAlignment": 0
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 1488,
+									"left": 1512,
 									"top": 1409,
-									"width": 706.76953125,
+									"width": 748.46728515625,
 									"height": 53
 								},
 								{
@@ -200,9 +200,9 @@
 												"$ref": "AAAAAAF8vDdj6w31VkM="
 											},
 											"font": "Arial;13;0",
-											"left": 1493,
+											"left": 1517,
 											"top": 1467,
-											"width": 696.76953125,
+											"width": 738.46728515625,
 											"height": 13,
 											"text": "«constructor»+savingAccount(theAccountNumber: int, thePIN: int, theAvailableBalance: double, theTotalBalance: double)",
 											"horizontalAlignment": 0
@@ -217,9 +217,9 @@
 												"$ref": "AAAAAAF8vDpQfA4NBxk="
 											},
 											"font": "Arial;13;0",
-											"left": 1493,
+											"left": 1517,
 											"top": 1482,
-											"width": 696.76953125,
+											"width": 738.46728515625,
 											"height": 13,
 											"text": "+getInterestRate(): double",
 											"horizontalAlignment": 0
@@ -234,9 +234,9 @@
 												"$ref": "AAAAAAF8vDrMOw4TQRg="
 											},
 											"font": "Arial;13;0",
-											"left": 1493,
+											"left": 1517,
 											"top": 1497,
-											"width": 696.76953125,
+											"width": 738.46728515625,
 											"height": 13,
 											"text": "+getFre(): double",
 											"horizontalAlignment": 0
@@ -251,9 +251,9 @@
 												"$ref": "AAAAAAF8wQm9GXB8/wg="
 											},
 											"font": "Arial;13;0",
-											"left": 1493,
+											"left": 1517,
 											"top": 1512,
-											"width": 696.76953125,
+											"width": 738.46728515625,
 											"height": 13,
 											"text": "+getType(): String",
 											"horizontalAlignment": 0
@@ -268,18 +268,18 @@
 												"$ref": "AAAAAAF8wQqfKXCI508="
 											},
 											"font": "Arial;13;0",
-											"left": 1493,
+											"left": 1517,
 											"top": 1527,
-											"width": 696.76953125,
+											"width": 738.46728515625,
 											"height": 13,
 											"text": "+setFrequency(freSelection: int): void",
 											"horizontalAlignment": 0
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 1488,
+									"left": 1512,
 									"top": 1462,
-									"width": 706.76953125,
+									"width": 748.46728515625,
 									"height": 83
 								},
 								{
@@ -293,7 +293,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1390.30224609375,
+									"left": 1414.30224609375,
 									"top": 1192,
 									"width": 10,
 									"height": 10
@@ -309,7 +309,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1390.30224609375,
+									"left": 1414.30224609375,
 									"top": 1192,
 									"width": 10,
 									"height": 10
@@ -317,9 +317,9 @@
 							],
 							"font": "Arial;13;0",
 							"containerChangeable": true,
-							"left": 1488,
+							"left": 1512,
 							"top": 1384,
-							"width": 706.76953125,
+							"width": 748.46728515625,
 							"height": 161,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8vDW/8g3HS7g="
@@ -365,7 +365,7 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 1312,
+											"left": 1408,
 											"top": 1296,
 											"height": 13
 										},
@@ -376,9 +376,9 @@
 												"$ref": "AAAAAAF8vEOfxw7HG7g="
 											},
 											"font": "Arial;13;1",
-											"left": 685,
+											"left": 733,
 											"top": 1055,
-											"width": 84.55078125,
+											"width": 92.89794921875,
 											"height": 13,
 											"text": "Keypad"
 										},
@@ -390,7 +390,7 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 1312,
+											"left": 1408,
 											"top": 1296,
 											"width": 80.68505859375,
 											"height": 13,
@@ -404,16 +404,16 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 1312,
+											"left": 1408,
 											"top": 1296,
 											"height": 13,
 											"horizontalAlignment": 1
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 680,
+									"left": 728,
 									"top": 1048,
-									"width": 94.55078125,
+									"width": 102.89794921875,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8vEOfyA7Ivrw="
@@ -448,18 +448,18 @@
 												"$ref": "AAAAAAF8vEO9Xw7uRNw="
 											},
 											"font": "Arial;13;0",
-											"left": 685,
+											"left": 733,
 											"top": 1078,
-											"width": 84.55078125,
+											"width": 92.89794921875,
 											"height": 13,
 											"text": "-Scanner input",
 											"horizontalAlignment": 0
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 680,
+									"left": 728,
 									"top": 1073,
-									"width": 94.55078125,
+									"width": 102.89794921875,
 									"height": 23
 								},
 								{
@@ -482,9 +482,9 @@
 												"$ref": "AAAAAAF8vEPxrA72FrI="
 											},
 											"font": "Arial;13;0",
-											"left": 685,
+											"left": 733,
 											"top": 1101,
-											"width": 84.55078125,
+											"width": 92.89794921875,
 											"height": 13,
 											"text": "+Keypad()",
 											"horizontalAlignment": 0
@@ -499,18 +499,18 @@
 												"$ref": "AAAAAAF8vEQBqw79Dkg="
 											},
 											"font": "Arial;13;0",
-											"left": 685,
+											"left": 733,
 											"top": 1116,
-											"width": 84.55078125,
+											"width": 92.89794921875,
 											"height": 13,
 											"text": "+getInput(): int",
 											"horizontalAlignment": 0
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 680,
+									"left": 728,
 									"top": 1096,
-									"width": 94.55078125,
+									"width": 102.89794921875,
 									"height": 38
 								},
 								{
@@ -524,7 +524,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 656,
+									"left": 704,
 									"top": 648,
 									"width": 10,
 									"height": 10
@@ -540,7 +540,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 656,
+									"left": 704,
 									"top": 648,
 									"width": 10,
 									"height": 10
@@ -548,9 +548,9 @@
 							],
 							"font": "Arial;13;0",
 							"containerChangeable": true,
-							"left": 680,
+							"left": 728,
 							"top": 1048,
-							"width": 94.55078125,
+							"width": 102.89794921875,
 							"height": 86,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8vEOfxw7HG7g="
@@ -596,7 +596,7 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 93.9208984375,
+											"left": -2.0791015625,
 											"top": 272,
 											"height": 13
 										},
@@ -607,9 +607,9 @@
 												"$ref": "AAAAAAF8vEYkDw9HGPg="
 											},
 											"font": "Arial;13;1",
-											"left": 101,
+											"left": 53,
 											"top": 791,
-											"width": 783.884765625,
+											"width": 816.92431640625,
 											"height": 13,
 											"text": "Transfer"
 										},
@@ -621,7 +621,7 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 93.9208984375,
+											"left": -2.0791015625,
 											"top": 272,
 											"width": 80.68505859375,
 											"height": 13,
@@ -635,16 +635,16 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 93.9208984375,
+											"left": -2.0791015625,
 											"top": 272,
 											"height": 13,
 											"horizontalAlignment": 1
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 96,
+									"left": 48,
 									"top": 784,
-									"width": 793.884765625,
+									"width": 826.92431640625,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8vEYkDw9Iw9A="
@@ -679,9 +679,9 @@
 												"$ref": "AAAAAAF8vEZUUw9u9ck="
 											},
 											"font": "Arial;13;0",
-											"left": 101,
+											"left": 53,
 											"top": 814,
-											"width": 783.884765625,
+											"width": 816.92431640625,
 											"height": 13,
 											"text": "-amount: double",
 											"horizontalAlignment": 0
@@ -696,9 +696,9 @@
 												"$ref": "AAAAAAF8vEZ5mA91VFQ="
 											},
 											"font": "Arial;13;0",
-											"left": 101,
+											"left": 53,
 											"top": 829,
-											"width": 783.884765625,
+											"width": 816.92431640625,
 											"height": 13,
 											"text": "-Keypad keypad",
 											"horizontalAlignment": 0
@@ -713,9 +713,9 @@
 												"$ref": "AAAAAAF8vEaUsw98hXI="
 											},
 											"font": "Arial;13;0",
-											"left": 101,
+											"left": 53,
 											"top": 844,
-											"width": 783.884765625,
+											"width": 816.92431640625,
 											"height": 13,
 											"text": "-target: int",
 											"horizontalAlignment": 0
@@ -730,9 +730,9 @@
 												"$ref": "AAAAAAF8vEbOvA+D+d0="
 											},
 											"font": "Arial;13;0",
-											"left": 101,
+											"left": 53,
 											"top": 859,
-											"width": 783.884765625,
+											"width": 816.92431640625,
 											"height": 13,
 											"text": "-BankDatabase bankDatabase",
 											"horizontalAlignment": 0
@@ -747,18 +747,18 @@
 												"$ref": "AAAAAAF8vEcIiw+KQbw="
 											},
 											"font": "Arial;13;0",
-											"left": 101,
+											"left": 53,
 											"top": 874,
-											"width": 783.884765625,
+											"width": 816.92431640625,
 											"height": 13,
 											"text": "-Screen screen",
 											"horizontalAlignment": 0
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 96,
+									"left": 48,
 									"top": 809,
-									"width": 793.884765625,
+									"width": 826.92431640625,
 									"height": 83
 								},
 								{
@@ -781,9 +781,9 @@
 												"$ref": "AAAAAAF8vEc+1A+RjSQ="
 											},
 											"font": "Arial;13;0",
-											"left": 101,
+											"left": 53,
 											"top": 897,
-											"width": 783.884765625,
+											"width": 816.92431640625,
 											"height": 13,
 											"text": "«constructor»+Transfer(userAccountNumber: int, Screen atmScreen: int, BankDatabase atmBankDatabase: int, Keypad atmKeypad: int)",
 											"horizontalAlignment": 0
@@ -798,9 +798,9 @@
 												"$ref": "AAAAAAF8vEgyHA+hIUg="
 											},
 											"font": "Arial;13;0",
-											"left": 101,
+											"left": 53,
 											"top": 912,
-											"width": 783.884765625,
+											"width": 816.92431640625,
 											"height": 13,
 											"text": "+isSufficientTransfer(amount: double, available: double): boolean",
 											"horizontalAlignment": 0
@@ -815,18 +815,18 @@
 												"$ref": "AAAAAAF8vEporA+v5pM="
 											},
 											"font": "Arial;13;0",
-											"left": 101,
+											"left": 53,
 											"top": 927,
-											"width": 783.884765625,
+											"width": 816.92431640625,
 											"height": 13,
 											"text": "+execute(): void",
 											"horizontalAlignment": 0
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 96,
+									"left": 48,
 									"top": 892,
-									"width": 793.884765625,
+									"width": 826.92431640625,
 									"height": 53
 								},
 								{
@@ -840,7 +840,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 46.96044921875,
+									"left": -1.03955078125,
 									"top": 136,
 									"width": 10,
 									"height": 10
@@ -856,7 +856,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 46.96044921875,
+									"left": -1.03955078125,
 									"top": 136,
 									"width": 10,
 									"height": 10
@@ -864,9 +864,9 @@
 							],
 							"font": "Arial;13;0",
 							"containerChangeable": true,
-							"left": 96,
+							"left": 48,
 							"top": 784,
-							"width": 793.884765625,
+							"width": 826.92431640625,
 							"height": 161,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8vEYkDw9HGPg="
@@ -911,8 +911,8 @@
 												"$ref": "AAAAAAF8vEsOpA+8Wyk="
 											},
 											"font": "Arial;13;0",
-											"left": 1933,
-											"top": 749,
+											"left": 2181,
+											"top": 797,
 											"width": 691.158203125,
 											"height": 13,
 											"text": "«abstract»"
@@ -924,8 +924,8 @@
 												"$ref": "AAAAAAF8vEsOpA+8Wyk="
 											},
 											"font": "Arial;13;3",
-											"left": 1933,
-											"top": 764,
+											"left": 2181,
+											"top": 812,
 											"width": 691.158203125,
 											"height": 13,
 											"text": "Transaction"
@@ -938,8 +938,8 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 3824,
-											"top": -192,
+											"left": 4320,
+											"top": -96,
 											"width": 80.68505859375,
 											"height": 13,
 											"text": "(from Model)"
@@ -952,15 +952,15 @@
 											},
 											"visible": false,
 											"font": "Arial;13;0",
-											"left": 3824,
-											"top": -192,
+											"left": 4320,
+											"top": -96,
 											"height": 13,
 											"horizontalAlignment": 1
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 1928,
-									"top": 744,
+									"left": 2176,
+									"top": 792,
 									"width": 701.158203125,
 									"height": 38,
 									"stereotypeLabel": {
@@ -996,8 +996,8 @@
 												"$ref": "AAAAAAF8vEs6tA/j+lg="
 											},
 											"font": "Arial;13;0",
-											"left": 1933,
-											"top": 787,
+											"left": 2181,
+											"top": 835,
 											"width": 691.158203125,
 											"height": 13,
 											"text": "-accountNumber: int",
@@ -1013,8 +1013,8 @@
 												"$ref": "AAAAAAF8vEtdTw/qgWE="
 											},
 											"font": "Arial;13;0",
-											"left": 1933,
-											"top": 802,
+											"left": 2181,
+											"top": 850,
 											"width": 691.158203125,
 											"height": 13,
 											"text": "-Screen screen",
@@ -1030,8 +1030,8 @@
 												"$ref": "AAAAAAF8vEtyUg/xc4k="
 											},
 											"font": "Arial;13;0",
-											"left": 1933,
-											"top": 817,
+											"left": 2181,
+											"top": 865,
 											"width": 691.158203125,
 											"height": 13,
 											"text": "-BankDatabase bankDatabase",
@@ -1039,8 +1039,8 @@
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 1928,
-									"top": 782,
+									"left": 2176,
+									"top": 830,
 									"width": 701.158203125,
 									"height": 53
 								},
@@ -1064,8 +1064,8 @@
 												"$ref": "AAAAAAF8vEueVA/4vwU="
 											},
 											"font": "Arial;13;0",
-											"left": 1933,
-											"top": 840,
+											"left": 2181,
+											"top": 888,
 											"width": 691.158203125,
 											"height": 13,
 											"text": "«constructor»+Transaction(userAccountNumber: int, Screen atmScreen: int, BankDatabase atmBankDatabase: int)",
@@ -1081,8 +1081,8 @@
 												"$ref": "AAAAAAF8vEyz3hAGR7M="
 											},
 											"font": "Arial;13;0",
-											"left": 1933,
-											"top": 855,
+											"left": 2181,
+											"top": 903,
 											"width": 691.158203125,
 											"height": 13,
 											"text": "+getAccountNumber(): int",
@@ -1098,8 +1098,8 @@
 												"$ref": "AAAAAAF8vEzr9RAPRU0="
 											},
 											"font": "Arial;13;0",
-											"left": 1933,
-											"top": 870,
+											"left": 2181,
+											"top": 918,
 											"width": 691.158203125,
 											"height": 13,
 											"text": "+Screen getScreen()",
@@ -1115,8 +1115,8 @@
 												"$ref": "AAAAAAF8vE0D+BAWhKg="
 											},
 											"font": "Arial;13;0",
-											"left": 1933,
-											"top": 885,
+											"left": 2181,
+											"top": 933,
 											"width": 691.158203125,
 											"height": 13,
 											"text": "+BankDatabase getBankDatabase()",
@@ -1132,8 +1132,8 @@
 												"$ref": "AAAAAAF8vE0qBRAd8e4="
 											},
 											"font": "Arial;13;0",
-											"left": 1933,
-											"top": 900,
+											"left": 2181,
+											"top": 948,
 											"width": 691.158203125,
 											"height": 13,
 											"text": "+execute(): void",
@@ -1141,8 +1141,8 @@
 										}
 									],
 									"font": "Arial;13;0",
-									"left": 1928,
-									"top": 835,
+									"left": 2176,
+									"top": 883,
 									"width": 701.158203125,
 									"height": 83
 								},
@@ -1157,8 +1157,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1912,
-									"top": -96,
+									"left": 2160,
+									"top": -48,
 									"width": 10,
 									"height": 10
 								},
@@ -1173,16 +1173,16 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1912,
-									"top": -96,
+									"left": 2160,
+									"top": -48,
 									"width": 10,
 									"height": 10
 								}
 							],
 							"font": "Arial;13;0",
 							"containerChangeable": true,
-							"left": 1928,
-							"top": 744,
+							"left": 2176,
+							"top": 792,
 							"width": 701.158203125,
 							"height": 176,
 							"nameCompartment": {
@@ -1242,7 +1242,7 @@
 											"font": "Arial;13;1",
 											"left": 461,
 											"top": 1183,
-											"width": 256.166015625,
+											"width": 277.5322265625,
 											"height": 13,
 											"text": "Screen"
 										},
@@ -1277,7 +1277,7 @@
 									"font": "Arial;13;0",
 									"left": 456,
 									"top": 1176,
-									"width": 266.166015625,
+									"width": 287.5322265625,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8vE4q6BAqNn8="
@@ -1342,7 +1342,7 @@
 									"font": "Arial;13;0",
 									"left": 456,
 									"top": 1201,
-									"width": 266.166015625,
+									"width": 287.5322265625,
 									"height": 10
 								},
 								{
@@ -1367,7 +1367,7 @@
 											"font": "Arial;13;0",
 											"left": 461,
 											"top": 1216,
-											"width": 256.166015625,
+											"width": 277.5322265625,
 											"height": 13,
 											"text": "+displayMessage(String message): void",
 											"horizontalAlignment": 0
@@ -1384,7 +1384,7 @@
 											"font": "Arial;13;0",
 											"left": 461,
 											"top": 1231,
-											"width": 256.166015625,
+											"width": 277.5322265625,
 											"height": 13,
 											"text": "+displayMessageLine(String message): void",
 											"horizontalAlignment": 0
@@ -1401,7 +1401,7 @@
 											"font": "Arial;13;0",
 											"left": 461,
 											"top": 1246,
-											"width": 256.166015625,
+											"width": 277.5322265625,
 											"height": 13,
 											"text": "+displayDollarAmount(amount: double): void",
 											"horizontalAlignment": 0
@@ -1428,7 +1428,7 @@
 									"font": "Arial;13;0",
 									"left": 456,
 									"top": 1211,
-									"width": 266.166015625,
+									"width": 287.5322265625,
 									"height": 53
 								},
 								{
@@ -1468,7 +1468,7 @@
 							"containerChangeable": true,
 							"left": 456,
 							"top": 1176,
-							"width": 266.166015625,
+							"width": 287.5322265625,
 							"height": 88,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8vE4q6BApTzs="
@@ -1527,7 +1527,7 @@
 											"font": "Arial;13;1",
 											"left": 781,
 											"top": 447,
-											"width": 1031.46875,
+											"width": 1073.36328125,
 											"height": 13,
 											"text": "Withdrawal"
 										},
@@ -1562,7 +1562,7 @@
 									"font": "Arial;13;0",
 									"left": 776,
 									"top": 440,
-									"width": 1041.46875,
+									"width": 1083.36328125,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8vFD3DxCMQA0="
@@ -1599,7 +1599,7 @@
 											"font": "Arial;13;0",
 											"left": 781,
 											"top": 470,
-											"width": 1031.46875,
+											"width": 1073.36328125,
 											"height": 13,
 											"text": "-amount: int",
 											"horizontalAlignment": 0
@@ -1616,7 +1616,7 @@
 											"font": "Arial;13;0",
 											"left": 781,
 											"top": 485,
-											"width": 1031.46875,
+											"width": 1073.36328125,
 											"height": 13,
 											"text": "-Keypad keypad",
 											"horizontalAlignment": 0
@@ -1633,7 +1633,7 @@
 											"font": "Arial;13;0",
 											"left": 781,
 											"top": 500,
-											"width": 1031.46875,
+											"width": 1073.36328125,
 											"height": 13,
 											"text": "-CashDispenser cashDispenser",
 											"horizontalAlignment": 0
@@ -1650,7 +1650,7 @@
 											"font": "Arial;13;0",
 											"left": 781,
 											"top": 515,
-											"width": 1031.46875,
+											"width": 1073.36328125,
 											"height": 13,
 											"underline": true,
 											"text": "-CUSTOMIZE: int",
@@ -1668,7 +1668,7 @@
 											"font": "Arial;13;0",
 											"left": 781,
 											"top": 530,
-											"width": 1031.46875,
+											"width": 1073.36328125,
 											"height": 13,
 											"underline": true,
 											"text": "-CANCELED: int",
@@ -1678,7 +1678,7 @@
 									"font": "Arial;13;0",
 									"left": 776,
 									"top": 465,
-									"width": 1041.46875,
+									"width": 1083.36328125,
 									"height": 83
 								},
 								{
@@ -1703,7 +1703,7 @@
 											"font": "Arial;13;0",
 											"left": 781,
 											"top": 553,
-											"width": 1031.46875,
+											"width": 1073.36328125,
 											"height": 13,
 											"text": "«constructor»+Withdrawal(userAccountNumber: int, Screen atmScreen: int, BankDatabase atmBankDatabase: int, Keypad atmKeypad: int, CashDispenser atmCashDispenser: int)",
 											"horizontalAlignment": 0
@@ -1720,7 +1720,7 @@
 											"font": "Arial;13;0",
 											"left": 781,
 											"top": 568,
-											"width": 1031.46875,
+											"width": 1073.36328125,
 											"height": 13,
 											"text": "+execute(): void",
 											"horizontalAlignment": 0
@@ -1737,7 +1737,7 @@
 											"font": "Arial;13;0",
 											"left": 781,
 											"top": 583,
-											"width": 1031.46875,
+											"width": 1073.36328125,
 											"height": 13,
 											"text": "+displayMenuOfAmounts(): int",
 											"horizontalAlignment": 0
@@ -1754,7 +1754,7 @@
 											"font": "Arial;13;0",
 											"left": 781,
 											"top": 598,
-											"width": 1031.46875,
+											"width": 1073.36328125,
 											"height": 13,
 											"text": "+checkIsMultiple(input: int, Screen screen: int): boolean",
 											"horizontalAlignment": 0
@@ -1763,7 +1763,7 @@
 									"font": "Arial;13;0",
 									"left": 776,
 									"top": 548,
-									"width": 1041.46875,
+									"width": 1083.36328125,
 									"height": 68
 								},
 								{
@@ -1803,7 +1803,7 @@
 							"containerChangeable": true,
 							"left": 776,
 							"top": 440,
-							"width": 1041.46875,
+							"width": 1083.36328125,
 							"height": 176,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8vFD3DxCLBw0="
@@ -2127,7 +2127,7 @@
 											"font": "Arial;13;1",
 											"left": 2173,
 											"top": 223,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"text": "SetComFre"
 										},
@@ -2162,7 +2162,7 @@
 									"font": "Arial;13;0",
 									"left": 2168,
 									"top": 216,
-									"width": 812.42626953125,
+									"width": 844.7294921875,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8wRGAj3ET3QQ="
@@ -2199,7 +2199,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 246,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"text": "-Keypad keypad",
 											"horizontalAlignment": 0
@@ -2216,7 +2216,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 261,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"text": "-BankDatabase bankDatabase",
 											"horizontalAlignment": 0
@@ -2233,7 +2233,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 276,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"text": "-Screen screen",
 											"horizontalAlignment": 0
@@ -2250,7 +2250,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 291,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"underline": true,
 											"text": "-CANCEL: int",
@@ -2268,7 +2268,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 306,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"underline": true,
 											"text": "-ANNUALLY: int",
@@ -2286,7 +2286,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 321,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"underline": true,
 											"text": "-HALF: int",
@@ -2304,7 +2304,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 336,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"underline": true,
 											"text": "-SEASONAL: int",
@@ -2322,7 +2322,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 351,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"underline": true,
 											"text": "-DAILY: int",
@@ -2332,7 +2332,7 @@
 									"font": "Arial;13;0",
 									"left": 2168,
 									"top": 241,
-									"width": 812.42626953125,
+									"width": 844.7294921875,
 									"height": 128
 								},
 								{
@@ -2357,7 +2357,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 374,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"text": "«constructor»+SetComFre(userAccountNumber: int, Screen atmScreen: int, BankDatabase atmBankDatabase: int, Keypad atmKeypad: int)",
 											"horizontalAlignment": 0
@@ -2374,7 +2374,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 389,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"text": "+frequencySelection(): int",
 											"horizontalAlignment": 0
@@ -2391,7 +2391,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 404,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"text": "+setMessage(nextYearBalance: double): void",
 											"horizontalAlignment": 0
@@ -2408,7 +2408,7 @@
 											"font": "Arial;13;0",
 											"left": 2173,
 											"top": 419,
-											"width": 802.42626953125,
+											"width": 834.7294921875,
 											"height": 13,
 											"text": "+execute(): void",
 											"horizontalAlignment": 0
@@ -2417,7 +2417,7 @@
 									"font": "Arial;13;0",
 									"left": 2168,
 									"top": 369,
-									"width": 812.42626953125,
+									"width": 844.7294921875,
 									"height": 68
 								},
 								{
@@ -2457,7 +2457,7 @@
 							"containerChangeable": true,
 							"left": 2168,
 							"top": 216,
-							"width": 812.42626953125,
+							"width": 844.7294921875,
 							"height": 221,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8wRGAjnES9HI="
@@ -2711,7 +2711,7 @@
 											"font": "Arial;13;1",
 											"left": 1541,
 											"top": 1127,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "Account"
 										},
@@ -2725,7 +2725,7 @@
 											"font": "Arial;13;0",
 											"left": 3008,
 											"top": -544,
-											"width": 73.67724609375,
+											"width": 80.68505859375,
 											"height": 13,
 											"text": "(from Model)"
 										},
@@ -2746,7 +2746,7 @@
 									"font": "Arial;13;0",
 									"left": 1536,
 									"top": 1120,
-									"width": 669.19140625,
+									"width": 709.23876953125,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8wbsmgtopD/0="
@@ -2783,7 +2783,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1150,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "-accountNumber: int",
 											"horizontalAlignment": 0
@@ -2800,7 +2800,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1165,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "-pin: int",
 											"horizontalAlignment": 0
@@ -2817,7 +2817,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1180,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "-availableBalance: double",
 											"horizontalAlignment": 0
@@ -2834,7 +2834,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1195,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "-totalBalance: double",
 											"horizontalAlignment": 0
@@ -2851,7 +2851,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1210,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"underline": true,
 											"text": "-TYPE: String",
@@ -2861,7 +2861,7 @@
 									"font": "Arial;13;0",
 									"left": 1536,
 									"top": 1145,
-									"width": 669.19140625,
+									"width": 709.23876953125,
 									"height": 83
 								},
 								{
@@ -2886,7 +2886,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1233,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "«constructor»+Account(theAccountNumber: int, thePIN: int, theAvailableBalance: double, theTotalBalance: double)",
 											"horizontalAlignment": 0
@@ -2903,7 +2903,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1248,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "+validate(userPIN: int): boolean",
 											"horizontalAlignment": 0
@@ -2920,7 +2920,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1263,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "+getAvailableBalance(): double",
 											"horizontalAlignment": 0
@@ -2937,7 +2937,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1278,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "+getTotalBalance(): double",
 											"horizontalAlignment": 0
@@ -2954,7 +2954,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1293,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "+credit(amount: double)",
 											"horizontalAlignment": 0
@@ -2971,7 +2971,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1308,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "+debit(amount: double)",
 											"horizontalAlignment": 0
@@ -2988,7 +2988,7 @@
 											"font": "Arial;13;0",
 											"left": 1541,
 											"top": 1323,
-											"width": 659.19140625,
+											"width": 699.23876953125,
 											"height": 13,
 											"text": "+getAccountNumber(): int",
 											"horizontalAlignment": 0
@@ -2997,7 +2997,7 @@
 									"font": "Arial;13;0",
 									"left": 1536,
 									"top": 1228,
-									"width": 669.19140625,
+									"width": 709.23876953125,
 									"height": 113
 								},
 								{
@@ -3037,7 +3037,7 @@
 							"containerChangeable": true,
 							"left": 1536,
 							"top": 1120,
-							"width": 669.19140625,
+							"width": 709.23876953125,
 							"height": 221,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8wbsmgtoo0mo="
@@ -3096,7 +3096,7 @@
 											"font": "Arial;13;1",
 											"left": 341,
 											"top": 351,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "ATM"
 										},
@@ -3110,7 +3110,7 @@
 											"font": "Arial;13;0",
 											"left": 624,
 											"top": -2560,
-											"width": 73.67724609375,
+											"width": 80.68505859375,
 											"height": 13,
 											"text": "(from Model)"
 										},
@@ -3131,7 +3131,7 @@
 									"font": "Arial;13;0",
 									"left": 336,
 									"top": 344,
-									"width": 250.0048828125,
+									"width": 262.94775390625,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8wbyvdtq3oo8="
@@ -3168,7 +3168,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 374,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "-userAuthenticated: boolean",
 											"horizontalAlignment": 0
@@ -3185,7 +3185,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 389,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "-currentAccountNumber: int",
 											"horizontalAlignment": 0
@@ -3202,7 +3202,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 404,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "-screen: Screen",
 											"horizontalAlignment": 0
@@ -3219,7 +3219,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 419,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "-keypad: Keypad",
 											"horizontalAlignment": 0
@@ -3236,7 +3236,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 434,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "-cashDispenser: CashDispenser",
 											"horizontalAlignment": 0
@@ -3253,7 +3253,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 449,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "-bankDatabase: BankDatabase",
 											"horizontalAlignment": 0
@@ -3270,7 +3270,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 464,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"underline": true,
 											"text": "-BALANCE_INQUIRY: int",
@@ -3288,7 +3288,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 479,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"underline": true,
 											"text": "-WITHDRAWAL: int",
@@ -3306,7 +3306,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 494,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"underline": true,
 											"text": "-TRANSFER: int",
@@ -3324,7 +3324,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 509,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"underline": true,
 											"text": "-EXIT: int",
@@ -3342,7 +3342,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 524,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "-GENERALTYPE: String",
 											"horizontalAlignment": 0
@@ -3359,7 +3359,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 539,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "-SAVINGTYPE: String",
 											"horizontalAlignment": 0
@@ -3376,7 +3376,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 554,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "-CHEQUEINGTYPE: String",
 											"horizontalAlignment": 0
@@ -3385,7 +3385,7 @@
 									"font": "Arial;13;0",
 									"left": 336,
 									"top": 369,
-									"width": 250.0048828125,
+									"width": 262.94775390625,
 									"height": 203
 								},
 								{
@@ -3410,7 +3410,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 577,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "«constructor»+ATM()",
 											"horizontalAlignment": 0
@@ -3427,7 +3427,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 592,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "+run()",
 											"horizontalAlignment": 0
@@ -3444,7 +3444,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 607,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "+authenticateUser()",
 											"horizontalAlignment": 0
@@ -3461,7 +3461,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 622,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "+performTransactions()",
 											"horizontalAlignment": 0
@@ -3478,7 +3478,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 637,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "+displayMainMenu(): int",
 											"horizontalAlignment": 0
@@ -3495,7 +3495,7 @@
 											"font": "Arial;13;0",
 											"left": 341,
 											"top": 652,
-											"width": 240.0048828125,
+											"width": 252.94775390625,
 											"height": 13,
 											"text": "+createTransaction(type: int): Transaction",
 											"horizontalAlignment": 0
@@ -3504,7 +3504,7 @@
 									"font": "Arial;13;0",
 									"left": 336,
 									"top": 572,
-									"width": 250.0048828125,
+									"width": 262.94775390625,
 									"height": 98
 								},
 								{
@@ -3544,7 +3544,7 @@
 							"containerChangeable": true,
 							"left": 336,
 							"top": 344,
-							"width": 250.0048828125,
+							"width": 262.94775390625,
 							"height": 326,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8wbyvdtq2PFI="
@@ -3603,7 +3603,7 @@
 											"font": "Arial;13;1",
 											"left": 77,
 											"top": 407,
-											"width": 108.72900390625,
+											"width": 115.73046875,
 											"height": 13,
 											"text": "ATMCaseStudy"
 										},
@@ -3617,7 +3617,7 @@
 											"font": "Arial;13;0",
 											"left": -688,
 											"top": -2496,
-											"width": 73.67724609375,
+											"width": 80.68505859375,
 											"height": 13,
 											"text": "(from Model)"
 										},
@@ -3638,7 +3638,7 @@
 									"font": "Arial;13;0",
 									"left": 72,
 									"top": 400,
-									"width": 118.72900390625,
+									"width": 125.73046875,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8wb4+LNtZXmE="
@@ -3665,7 +3665,7 @@
 									"font": "Arial;13;0",
 									"left": 72,
 									"top": 425,
-									"width": 118.72900390625,
+									"width": 125.73046875,
 									"height": 10
 								},
 								{
@@ -3690,7 +3690,7 @@
 											"font": "Arial;13;0",
 											"left": 77,
 											"top": 440,
-											"width": 108.72900390625,
+											"width": 115.73046875,
 											"height": 13,
 											"text": "+main(args: string)",
 											"horizontalAlignment": 0
@@ -3699,7 +3699,7 @@
 									"font": "Arial;13;0",
 									"left": 72,
 									"top": 435,
-									"width": 118.72900390625,
+									"width": 125.73046875,
 									"height": 23
 								},
 								{
@@ -3739,7 +3739,7 @@
 							"containerChangeable": true,
 							"left": 72,
 							"top": 400,
-							"width": 118.72900390625,
+							"width": 125.73046875,
 							"height": 58,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8wb4+LNtYVgs="
@@ -3798,7 +3798,7 @@
 											"font": "Arial;13;1",
 											"left": 1349,
 											"top": 679,
-											"width": 382.611328125,
+											"width": 405.01220703125,
 											"height": 13,
 											"text": "BankDatabase"
 										},
@@ -3812,7 +3812,7 @@
 											"font": "Arial;13;0",
 											"left": 944,
 											"top": 1296,
-											"width": 73.67724609375,
+											"width": 80.68505859375,
 											"height": 13,
 											"text": "(from Model)"
 										},
@@ -3833,7 +3833,7 @@
 									"font": "Arial;13;0",
 									"left": 1344,
 									"top": 672,
-									"width": 392.611328125,
+									"width": 415.01220703125,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8wb6uOduPwFc="
@@ -3870,7 +3870,7 @@
 											"font": "Arial;13;0",
 											"left": 1349,
 											"top": 702,
-											"width": 382.611328125,
+											"width": 405.01220703125,
 											"height": 13,
 											"text": "-accounts[]: Account",
 											"horizontalAlignment": 0
@@ -3915,7 +3915,7 @@
 									"font": "Arial;13;0",
 									"left": 1344,
 									"top": 697,
-									"width": 392.611328125,
+									"width": 415.01220703125,
 									"height": 23
 								},
 								{
@@ -3940,7 +3940,7 @@
 											"font": "Arial;13;0",
 											"left": 1349,
 											"top": 725,
-											"width": 382.611328125,
+											"width": 405.01220703125,
 											"height": 13,
 											"text": "«constructor»+BankDatabase()",
 											"horizontalAlignment": 0
@@ -3957,7 +3957,7 @@
 											"font": "Arial;13;0",
 											"left": 1349,
 											"top": 740,
-											"width": 382.611328125,
+											"width": 405.01220703125,
 											"height": 13,
 											"text": "+getAccount(accountNumber: int): Account",
 											"horizontalAlignment": 0
@@ -3974,7 +3974,7 @@
 											"font": "Arial;13;0",
 											"left": 1349,
 											"top": 755,
-											"width": 382.611328125,
+											"width": 405.01220703125,
 											"height": 13,
 											"text": "+authenticateUser(userAccountNumber: int, userPIN: int): boolean",
 											"horizontalAlignment": 0
@@ -3991,7 +3991,7 @@
 											"font": "Arial;13;0",
 											"left": 1349,
 											"top": 770,
-											"width": 382.611328125,
+											"width": 405.01220703125,
 											"height": 13,
 											"text": "+accountExists(ACnumber): boolean",
 											"horizontalAlignment": 0
@@ -4008,7 +4008,7 @@
 											"font": "Arial;13;0",
 											"left": 1349,
 											"top": 785,
-											"width": 382.611328125,
+											"width": 405.01220703125,
 											"height": 13,
 											"text": "+getAvailableBalance(userAccountNumber: int): double",
 											"horizontalAlignment": 0
@@ -4025,7 +4025,7 @@
 											"font": "Arial;13;0",
 											"left": 1349,
 											"top": 800,
-											"width": 382.611328125,
+											"width": 405.01220703125,
 											"height": 13,
 											"text": "+getTotalBalance(userAccountNumber: int): double",
 											"horizontalAlignment": 0
@@ -4042,7 +4042,7 @@
 											"font": "Arial;13;0",
 											"left": 1349,
 											"top": 815,
-											"width": 382.611328125,
+											"width": 405.01220703125,
 											"height": 13,
 											"text": "+credit(userAccountNumber: int, amount: double)",
 											"horizontalAlignment": 0
@@ -4059,7 +4059,7 @@
 											"font": "Arial;13;0",
 											"left": 1349,
 											"top": 830,
-											"width": 382.611328125,
+											"width": 405.01220703125,
 											"height": 13,
 											"text": "+debit(userAccountNumber: int, amount: double)",
 											"horizontalAlignment": 0
@@ -4068,7 +4068,7 @@
 									"font": "Arial;13;0",
 									"left": 1344,
 									"top": 720,
-									"width": 392.611328125,
+									"width": 415.01220703125,
 									"height": 128
 								},
 								{
@@ -4108,7 +4108,7 @@
 							"containerChangeable": true,
 							"left": 1344,
 							"top": 672,
-							"width": 392.611328125,
+							"width": 415.01220703125,
 							"height": 176,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8wb6uOduOCRw="
@@ -4155,7 +4155,7 @@
 											"visible": false,
 											"font": "Arial;13;0",
 											"left": 3232,
-											"top": 880,
+											"top": 912,
 											"height": 13
 										},
 										{
@@ -4166,8 +4166,8 @@
 											},
 											"font": "Arial;13;1",
 											"left": 2365,
-											"top": 1159,
-											"width": 711.2294921875,
+											"top": 1175,
+											"width": 753.10498046875,
 											"height": 13,
 											"text": "ChecqueAccount"
 										},
@@ -4180,8 +4180,8 @@
 											"visible": false,
 											"font": "Arial;13;0",
 											"left": 3232,
-											"top": 880,
-											"width": 73.67724609375,
+											"top": 912,
+											"width": 80.68505859375,
 											"height": 13,
 											"text": "(from Model)"
 										},
@@ -4194,15 +4194,15 @@
 											"visible": false,
 											"font": "Arial;13;0",
 											"left": 3232,
-											"top": 880,
+											"top": 912,
 											"height": 13,
 											"horizontalAlignment": 1
 										}
 									],
 									"font": "Arial;13;0",
 									"left": 2360,
-									"top": 1152,
-									"width": 721.2294921875,
+									"top": 1168,
+									"width": 763.10498046875,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8wcK3f9xEE9A="
@@ -4238,8 +4238,8 @@
 											},
 											"font": "Arial;13;0",
 											"left": 2365,
-											"top": 1182,
-											"width": 711.2294921875,
+											"top": 1198,
+											"width": 753.10498046875,
 											"height": 13,
 											"text": "-LimitPerCheque: double",
 											"horizontalAlignment": 0
@@ -4255,8 +4255,8 @@
 											},
 											"font": "Arial;13;0",
 											"left": 2365,
-											"top": 1197,
-											"width": 711.2294921875,
+											"top": 1213,
+											"width": 753.10498046875,
 											"height": 13,
 											"underline": true,
 											"text": "-TYPE: String",
@@ -4265,8 +4265,8 @@
 									],
 									"font": "Arial;13;0",
 									"left": 2360,
-									"top": 1177,
-									"width": 721.2294921875,
+									"top": 1193,
+									"width": 763.10498046875,
 									"height": 38
 								},
 								{
@@ -4290,8 +4290,8 @@
 											},
 											"font": "Arial;13;0",
 											"left": 2365,
-											"top": 1220,
-											"width": 711.2294921875,
+											"top": 1236,
+											"width": 753.10498046875,
 											"height": 13,
 											"text": "«constructor»+ChecqueAccount(theAccountNumber: int, thePIN: int, theAvailableBalance: double, theTotalBalance: double)",
 											"horizontalAlignment": 0
@@ -4307,8 +4307,8 @@
 											},
 											"font": "Arial;13;0",
 											"left": 2365,
-											"top": 1235,
-											"width": 711.2294921875,
+											"top": 1251,
+											"width": 753.10498046875,
 											"height": 13,
 											"text": "+SetLimit(limit: double)",
 											"horizontalAlignment": 0
@@ -4324,8 +4324,8 @@
 											},
 											"font": "Arial;13;0",
 											"left": 2365,
-											"top": 1250,
-											"width": 711.2294921875,
+											"top": 1266,
+											"width": 753.10498046875,
 											"height": 13,
 											"text": "+getLimit(): double",
 											"horizontalAlignment": 0
@@ -4333,8 +4333,8 @@
 									],
 									"font": "Arial;13;0",
 									"left": 2360,
-									"top": 1215,
-									"width": 721.2294921875,
+									"top": 1231,
+									"width": 763.10498046875,
 									"height": 53
 								},
 								{
@@ -4349,7 +4349,7 @@
 									"visible": false,
 									"font": "Arial;13;0",
 									"left": 1616,
-									"top": 440,
+									"top": 456,
 									"width": 10,
 									"height": 10
 								},
@@ -4365,7 +4365,7 @@
 									"visible": false,
 									"font": "Arial;13;0",
 									"left": 1616,
-									"top": 440,
+									"top": 456,
 									"width": 10,
 									"height": 10
 								}
@@ -4373,8 +4373,8 @@
 							"font": "Arial;13;0",
 							"containerChangeable": true,
 							"left": 2360,
-							"top": 1152,
-							"width": 721.2294921875,
+							"top": 1168,
+							"width": 763.10498046875,
 							"height": 116,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8wcK3f9xDfmg="
@@ -4433,7 +4433,7 @@
 											"font": "Arial;13;1",
 											"left": 1293,
 											"top": 231,
-											"width": 641.31005859375,
+											"width": 666.9482421875,
 											"height": 13,
 											"text": "BalanceInquiry"
 										},
@@ -4447,7 +4447,7 @@
 											"font": "Arial;13;0",
 											"left": 32,
 											"top": -1488,
-											"width": 73.67724609375,
+											"width": 80.68505859375,
 											"height": 13,
 											"text": "(from Model)"
 										},
@@ -4468,7 +4468,7 @@
 									"font": "Arial;13;0",
 									"left": 1288,
 									"top": 224,
-									"width": 651.31005859375,
+									"width": 676.9482421875,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8wcNaHtyXirI="
@@ -4495,7 +4495,7 @@
 									"font": "Arial;13;0",
 									"left": 1288,
 									"top": 249,
-									"width": 651.31005859375,
+									"width": 676.9482421875,
 									"height": 10
 								},
 								{
@@ -4520,7 +4520,7 @@
 											"font": "Arial;13;0",
 											"left": 1293,
 											"top": 264,
-											"width": 641.31005859375,
+											"width": 666.9482421875,
 											"height": 13,
 											"text": "«constuctor»+BalanceInquiry(userAccountNumber: int, atmScreen: Screen, atmBankDatabase: BankDatabase)",
 											"horizontalAlignment": 0
@@ -4537,7 +4537,7 @@
 											"font": "Arial;13;0",
 											"left": 1293,
 											"top": 279,
-											"width": 641.31005859375,
+											"width": 666.9482421875,
 											"height": 13,
 											"text": "+execute()",
 											"horizontalAlignment": 0
@@ -4546,7 +4546,7 @@
 									"font": "Arial;13;0",
 									"left": 1288,
 									"top": 259,
-									"width": 651.31005859375,
+									"width": 676.9482421875,
 									"height": 38
 								},
 								{
@@ -4586,7 +4586,7 @@
 							"containerChangeable": true,
 							"left": 1288,
 							"top": 224,
-							"width": 651.31005859375,
+							"width": 676.9482421875,
 							"height": 73,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8wcNaHtyWTVM="
@@ -4645,7 +4645,7 @@
 											"font": "Arial;13;1",
 											"left": 797,
 											"top": 151,
-											"width": 279.55078125,
+											"width": 296.31494140625,
 											"height": 13,
 											"text": "CashDispenser"
 										},
@@ -4659,7 +4659,7 @@
 											"font": "Arial;13;0",
 											"left": -144,
 											"top": -1664,
-											"width": 73.67724609375,
+											"width": 80.68505859375,
 											"height": 13,
 											"text": "(from Model)"
 										},
@@ -4680,7 +4680,7 @@
 									"font": "Arial;13;0",
 									"left": 792,
 									"top": 144,
-									"width": 289.55078125,
+									"width": 306.31494140625,
 									"height": 25,
 									"stereotypeLabel": {
 										"$ref": "AAAAAAF8wcorsdz+My8="
@@ -4717,7 +4717,7 @@
 											"font": "Arial;13;0",
 											"left": 797,
 											"top": 174,
-											"width": 279.55078125,
+											"width": 296.31494140625,
 											"height": 13,
 											"underline": true,
 											"text": "-INITIAL_COUNT: int",
@@ -4735,7 +4735,7 @@
 											"font": "Arial;13;0",
 											"left": 797,
 											"top": 189,
-											"width": 279.55078125,
+											"width": 296.31494140625,
 											"height": 13,
 											"text": "-count: int",
 											"horizontalAlignment": 0
@@ -4744,7 +4744,7 @@
 									"font": "Arial;13;0",
 									"left": 792,
 									"top": 169,
-									"width": 289.55078125,
+									"width": 306.31494140625,
 									"height": 38
 								},
 								{
@@ -4769,7 +4769,7 @@
 											"font": "Arial;13;0",
 											"left": 797,
 											"top": 212,
-											"width": 279.55078125,
+											"width": 296.31494140625,
 											"height": 13,
 											"text": "«constuctor»+CashDispenser()",
 											"horizontalAlignment": 0
@@ -4786,7 +4786,7 @@
 											"font": "Arial;13;0",
 											"left": 797,
 											"top": 227,
-											"width": 279.55078125,
+											"width": 296.31494140625,
 											"height": 13,
 											"text": "+dispenseCash(amount: int)",
 											"horizontalAlignment": 0
@@ -4803,7 +4803,7 @@
 											"font": "Arial;13;0",
 											"left": 797,
 											"top": 242,
-											"width": 279.55078125,
+											"width": 296.31494140625,
 											"height": 13,
 											"text": "+isSufficientCashAvailable(amount: int): boolean",
 											"horizontalAlignment": 0
@@ -4812,7 +4812,7 @@
 									"font": "Arial;13;0",
 									"left": 792,
 									"top": 207,
-									"width": 289.55078125,
+									"width": 306.31494140625,
 									"height": 53
 								},
 								{
@@ -4852,7 +4852,7 @@
 							"containerChangeable": true,
 							"left": 792,
 							"top": 144,
-							"width": 289.55078125,
+							"width": 306.31494140625,
 							"height": 116,
 							"nameCompartment": {
 								"$ref": "AAAAAAF8wcorsdz9ovw="
@@ -4891,8 +4891,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 266,
-									"top": 438,
+									"left": 327,
+									"top": 412,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -4912,8 +4912,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 269,
-									"top": 423,
+									"left": 334,
+									"top": 399,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -4933,8 +4933,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 259,
-									"top": 467,
+									"left": 312,
+									"top": 439,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -4952,7 +4952,7 @@
 								"$ref": "AAAAAAF8wb4+LNtXZh0="
 							},
 							"lineStyle": 1,
-							"points": "191:442;335:476",
+							"points": "198:429;320:432;335:440",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wdl3zN2PtxM="
@@ -4985,7 +4985,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 447,
+									"left": 455,
 									"top": 187,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -5006,7 +5006,7 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 447,
+									"left": 455,
 									"top": 172,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -5027,7 +5027,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 448,
+									"left": 456,
 									"top": 216,
 									"height": 13,
 									"alpha": -1.5707963267948966,
@@ -5046,7 +5046,7 @@
 								"$ref": "AAAAAAF8wbyvddq1XHg="
 							},
 							"lineStyle": 1,
-							"points": "453:343;448:208;791:203",
+							"points": "461:343;456:208;791:203",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wdnEBN2gvkM="
@@ -5079,7 +5079,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 680,
+									"left": 687,
 									"top": 490,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -5100,7 +5100,7 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 680,
+									"left": 688,
 									"top": 475,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -5121,7 +5121,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 679,
+									"left": 686,
 									"top": 519,
 									"height": 13,
 									"alpha": -1.5707963267948966,
@@ -5140,7 +5140,7 @@
 								"$ref": "AAAAAAF8wbyvddq1XHg="
 							},
 							"lineStyle": 1,
-							"points": "586:509;775:514",
+							"points": "599:509;775:514",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wdn6Md2yaHk="
@@ -5173,8 +5173,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 496,
-									"top": 715,
+									"left": 472,
+									"top": 723,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -5194,8 +5194,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 496,
-									"top": 700,
+									"left": 472,
+									"top": 708,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -5215,8 +5215,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 495,
-									"top": 744,
+									"left": 471,
+									"top": 752,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -5234,7 +5234,7 @@
 								"$ref": "AAAAAAF8wbyvddq1XHg="
 							},
 							"lineStyle": 1,
-							"points": "486:670;496:736;1343:755",
+							"points": "470:670;472:744;1343:756",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wdrFGt3IQa0="
@@ -5268,7 +5268,7 @@
 									"visible": false,
 									"font": "Arial;13;0",
 									"left": 1198,
-									"top": 673,
+									"top": 681,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -5289,7 +5289,7 @@
 									"visible": null,
 									"font": "Arial;13;0",
 									"left": 1213,
-									"top": 672,
+									"top": 680,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -5310,7 +5310,7 @@
 									"visible": false,
 									"font": "Arial;13;0",
 									"left": 1169,
-									"top": 674,
+									"top": 682,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -5328,7 +5328,7 @@
 								"$ref": "AAAAAAF8wbyvddq1XHg="
 							},
 							"lineStyle": 1,
-							"points": "586:612;648:664;1184:680;1192:856;1235:879",
+							"points": "565:670;576:688;1184:688;1192:872;1208:879",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wdtMX93a+Bg="
@@ -5361,8 +5361,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 461,
-									"top": 755,
+									"left": 462,
+									"top": 760,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -5382,8 +5382,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 475,
-									"top": 749,
+									"left": 477,
+									"top": 758,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -5403,8 +5403,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 434,
-									"top": 768,
+									"left": 433,
+									"top": 763,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -5422,7 +5422,7 @@
 								"$ref": "AAAAAAF8wbyvddq1XHg="
 							},
 							"lineStyle": 1,
-							"points": "452:670;448:768;455:783",
+							"points": "455:670;448:768;450:783",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wduPZt3uF0A="
@@ -5477,7 +5477,7 @@
 									"visible": null,
 									"font": "Arial;13;0",
 									"left": 906,
-									"top": 425,
+									"top": 424,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -5497,7 +5497,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 951,
+									"left": 950,
 									"top": 426,
 									"height": 13,
 									"alpha": -1.5707963267948966,
@@ -5516,7 +5516,7 @@
 								"$ref": "AAAAAAF8vFD3DxCKEUc="
 							},
 							"lineStyle": 1,
-							"points": "963:439;936:432;936:260",
+							"points": "964:439;936:432;942:260",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wdwggN4ALVU="
@@ -5610,7 +5610,7 @@
 								"$ref": "AAAAAAF8vFD3DxCKEUc="
 							},
 							"lineStyle": 1,
-							"points": "964:616;904:632;896:1072;775:1085",
+							"points": "967:616;904:632;896:1072;831:1082",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wdyVGd4SUDY="
@@ -5643,8 +5643,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 934,
-									"top": 910,
+									"left": 942,
+									"top": 918,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -5664,8 +5664,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 949,
-									"top": 910,
+									"left": 957,
+									"top": 918,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -5685,8 +5685,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 905,
-									"top": 909,
+									"left": 913,
+									"top": 917,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -5704,7 +5704,7 @@
 								"$ref": "AAAAAAF8vFD3DxCKEUc="
 							},
 							"lineStyle": 1,
-							"points": "1006:616;928:640;912:1192;722:1208",
+							"points": "1037:616;936:648;920:1200;744:1210",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wdzMLd4lEos="
@@ -5738,7 +5738,7 @@
 									"visible": false,
 									"font": "Arial;13;0",
 									"left": 1317,
-									"top": 652,
+									"top": 651,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -5759,7 +5759,7 @@
 									"visible": null,
 									"font": "Arial;13;0",
 									"left": 1322,
-									"top": 638,
+									"top": 637,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -5780,7 +5780,7 @@
 									"visible": false,
 									"font": "Arial;13;0",
 									"left": 1306,
-									"top": 679,
+									"top": 680,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -5798,7 +5798,7 @@
 								"$ref": "AAAAAAF8vFD3DxCKEUc="
 							},
 							"lineStyle": 1,
-							"points": "1306:616;1312:672;1343:684",
+							"points": "1314:616;1312:672;1343:683",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wd1lT948xZk="
@@ -5831,8 +5831,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2294,
-									"top": 546,
+									"left": 2498,
+									"top": 629,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -5852,8 +5852,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 2309,
-									"top": 546,
+									"left": 2513,
+									"top": 628,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -5873,8 +5873,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2265,
-									"top": 545,
+									"left": 2469,
+									"top": 630,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -5892,7 +5892,7 @@
 								"$ref": "AAAAAAF8vFD3DxCKEUc="
 							},
 							"lineStyle": 1,
-							"points": "1817:540;2280:552;2279:743",
+							"points": "1859:527;2480:528;2488:744;2501:791",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wd4QVd5P0I0="
@@ -5925,8 +5925,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 503,
-									"top": 275,
+									"left": 872,
+									"top": 259,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -5946,8 +5946,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 503,
-									"top": 260,
+									"left": 872,
+									"top": 244,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -5967,8 +5967,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 504,
-									"top": 304,
+									"left": 872,
+									"top": 289,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -5986,7 +5986,7 @@
 								"$ref": "AAAAAAF8wbyvddq1XHg="
 							},
 							"lineStyle": 1,
-							"points": "494:343;504:296;1287:271",
+							"points": "470:343;472:280;1272:280;1287:279",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wd57Ld5hGb0="
@@ -6019,7 +6019,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 631,
+									"left": 623,
 									"top": 347,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -6040,7 +6040,7 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 631,
+									"left": 623,
 									"top": 332,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -6061,7 +6061,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 632,
+									"left": 624,
 									"top": 376,
 									"height": 13,
 									"alpha": -1.5707963267948966,
@@ -6080,7 +6080,7 @@
 								"$ref": "AAAAAAF8wbyvddq1XHg="
 							},
 							"lineStyle": 1,
-							"points": "586:405;632:368;2167:335",
+							"points": "599:390;624:368;2167:335",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wd7Bv95zDW0="
@@ -6113,8 +6113,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2031,
-									"top": 625,
+									"left": 1587,
+									"top": 611,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -6134,8 +6134,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 2046,
-									"top": 625,
+									"left": 1587,
+									"top": 596,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -6155,8 +6155,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2001,
-									"top": 626,
+									"left": 1588,
+									"top": 640,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -6174,7 +6174,7 @@
 								"$ref": "AAAAAAF8wbyvddq1XHg="
 							},
 							"lineStyle": 1,
-							"points": "586:589;664:640;2016:632;2016:736;2035:743",
+							"points": "599:604;648:640;2528:624;2527:791",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wd+BTt6F7uM="
@@ -6207,8 +6207,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 38,
-									"top": 905,
+									"left": 26,
+									"top": 790,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -6228,8 +6228,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 53,
-									"top": 904,
+									"left": 41,
+									"top": 790,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -6249,8 +6249,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 9,
-									"top": 906,
+									"left": -3,
+									"top": 789,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -6268,7 +6268,7 @@
 								"$ref": "AAAAAAF8wbyvddq1XHg="
 							},
 							"lineStyle": 1,
-							"points": "335:559;16:696;32:1128;679:1093",
+							"points": "335:503;16:496;8:1096;727:1090",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weAkut6a9tU="
@@ -6301,8 +6301,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 94,
-									"top": 961,
+									"left": 38,
+									"top": 858,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -6322,8 +6322,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 109,
-									"top": 961,
+									"left": 53,
+									"top": 858,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -6343,8 +6343,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 65,
-									"top": 962,
+									"left": 9,
+									"top": 857,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -6362,7 +6362,7 @@
 								"$ref": "AAAAAAF8wbyvddq1XHg="
 							},
 							"lineStyle": 1,
-							"points": "335:575;72:720;88:1216;455:1218",
+							"points": "335:510;32:520;16:1208;455:1216",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weBd0N6u5tw="
@@ -6395,7 +6395,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1114,
+									"left": 1107,
 									"top": 780,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -6416,7 +6416,7 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 1113,
+									"left": 1106,
 									"top": 765,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -6437,7 +6437,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1117,
+									"left": 1110,
 									"top": 809,
 									"height": 13,
 									"alpha": -1.5707963267948966,
@@ -6456,7 +6456,7 @@
 								"$ref": "AAAAAAF8vEYkDw9GJas="
 							},
 							"lineStyle": 1,
-							"points": "890:824;1343:779",
+							"points": "875:824;1343:779",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weEzD97Do7I="
@@ -6550,7 +6550,7 @@
 								"$ref": "AAAAAAF8vEYkDw9GJas="
 							},
 							"lineStyle": 1,
-							"points": "890:860;1320:856;1776:864;1927:854",
+							"points": "875:860;1320:856;1776:864;2175:872",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weFnNd7UuFI="
@@ -6583,8 +6583,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 638,
-									"top": 979,
+									"left": 790,
+									"top": 945,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -6604,8 +6604,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 648,
-									"top": 968,
+									"left": 805,
+									"top": 945,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -6625,8 +6625,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 617,
-									"top": 1000,
+									"left": 761,
+									"top": 946,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -6644,7 +6644,7 @@
 								"$ref": "AAAAAAF8vEYkDw9GJas="
 							},
 							"lineStyle": 1,
-							"points": "576:945;681:1047",
+							"points": "751:945;776:952;777:1047",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weHNH97p6Ho="
@@ -6677,8 +6677,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 487,
-									"top": 1133,
+									"left": 494,
+									"top": 1148,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -6698,8 +6698,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 495,
-									"top": 1120,
+									"left": 500,
+									"top": 1134,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -6719,8 +6719,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 472,
-									"top": 1158,
+									"left": 481,
+									"top": 1175,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -6738,7 +6738,7 @@
 								"$ref": "AAAAAAF8vEYkDw9GJas="
 							},
 							"lineStyle": 1,
-							"points": "489:945;480:1152;517:1175",
+							"points": "467:945;488:1168;503:1175",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weH1yN77rnM="
@@ -6771,8 +6771,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1866,
-									"top": 509,
+									"left": 1898,
+									"top": 506,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -6792,8 +6792,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 1881,
-									"top": 509,
+									"left": 1913,
+									"top": 506,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -6813,8 +6813,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1837,
-									"top": 510,
+									"left": 1869,
+									"top": 505,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -6832,7 +6832,7 @@
 								"$ref": "AAAAAAF8wcNaHtyVl0M="
 							},
 							"lineStyle": 1,
-							"points": "1780:297;1848:312;1856:720;1737:735",
+							"points": "1787:297;1888:320;1880:704;1759:724",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weMDmd8Uh6E="
@@ -6865,8 +6865,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1890,
-									"top": 666,
+									"left": 1715,
+									"top": 1065,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -6886,8 +6886,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 1905,
-									"top": 666,
+									"left": 1715,
+									"top": 1080,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -6907,8 +6907,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1861,
-									"top": 665,
+									"left": 1716,
+									"top": 1035,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -6926,7 +6926,7 @@
 								"$ref": "AAAAAAF8wcNaHtyVl0M="
 							},
 							"lineStyle": 1,
-							"points": "1803:297;1880:312;1872:1032;722:1199",
+							"points": "1858:297;1952:312;1936:1056;1496:1056;1488:1248;744:1224",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weNzUN8plXY="
@@ -7053,8 +7053,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1329,
-									"top": 1056,
+									"left": 1246,
+									"top": 1045,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -7074,8 +7074,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 1330,
-									"top": 1071,
+									"left": 1261,
+									"top": 1045,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -7095,8 +7095,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1326,
-									"top": 1027,
+									"left": 1217,
+									"top": 1046,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -7114,7 +7114,7 @@
 								"$ref": "AAAAAAF8wQ+Bk3C3WPM="
 							},
 							"lineStyle": 1,
-							"points": "1337:1001;1328:1048;775:1087",
+							"points": "1244:1001;1232:1008;1232:1096;831:1091",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weRk3t9PxO8="
@@ -7208,7 +7208,7 @@
 								"$ref": "AAAAAAF8wQ+Bk3C3WPM="
 							},
 							"lineStyle": 1,
-							"points": "1349:1001;1352:1208;722:1217",
+							"points": "1349:1001;1352:1208;744:1217",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weSOSd9hhr4="
@@ -7241,8 +7241,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2118,
-									"top": 551,
+									"left": 2120,
+									"top": 739,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -7262,8 +7262,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 2133,
-									"top": 549,
+									"left": 2120,
+									"top": 724,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -7283,8 +7283,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2089,
-									"top": 556,
+									"left": 2120,
+									"top": 769,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -7302,7 +7302,7 @@
 								"$ref": "AAAAAAF8wcNaHtyVl0M="
 							},
 							"lineStyle": 1,
-							"points": "1752:297;2080:384;2128:736;2139:743",
+							"points": "1965:257;2112:256;2120:760;2448:760;2468:791",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weUZbt9z1zE="
@@ -7335,8 +7335,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1830,
-									"top": 953,
+									"left": 1808,
+									"top": 1091,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -7356,8 +7356,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 1845,
-									"top": 952,
+									"left": 1808,
+									"top": 1076,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -7377,8 +7377,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1801,
-									"top": 954,
+									"left": 1808,
+									"top": 1121,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -7396,7 +7396,7 @@
 								"$ref": "AAAAAAF8wb6uOduNH40="
 							},
 							"lineStyle": 1,
-							"points": "1737:795;1808:808;1824:1112;1827:1119",
+							"points": "1759:799;1808:808;1808:1112;1824:1112;1828:1119",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weXif9+GjOQ="
@@ -7429,7 +7429,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1888,
+									"left": 1960,
 									"top": 995,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -7450,7 +7450,7 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 1888,
+									"left": 1960,
 									"top": 980,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -7471,7 +7471,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1887,
+									"left": 1959,
 									"top": 1024,
 									"height": 13,
 									"alpha": -1.5707963267948966,
@@ -7490,7 +7490,7 @@
 								"$ref": "AAAAAAF8wb6uOduNH40="
 							},
 							"lineStyle": 1,
-							"points": "1737:764;1888:768;1888:1016;2712:1032;2717:1151",
+							"points": "1759:768;1960:776;1960:1016;2736:1024;2740:1167",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weY4Lt+ZMqc="
@@ -7523,7 +7523,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2044,
+									"left": 2096,
 									"top": 1059,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -7544,7 +7544,7 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 2044,
+									"left": 2096,
 									"top": 1044,
 									"height": 13,
 									"alpha": 1.5707963267948966,
@@ -7565,7 +7565,7 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2044,
+									"left": 2096,
 									"top": 1089,
 									"height": 13,
 									"alpha": -1.5707963267948966,
@@ -7584,7 +7584,7 @@
 								"$ref": "AAAAAAF8wb6uOduNH40="
 							},
 							"lineStyle": 1,
-							"points": "1737:775;1840:784;1840:1080;2248:1080;2248:1472;2195:1471",
+							"points": "1759:776;1856:784;1856:1080;2336:1080;2336:1464;2260:1464",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8webGid+w2q0="
@@ -7617,8 +7617,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1838,
-									"top": 1353,
+									"left": 1872,
+									"top": 1355,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -7638,8 +7638,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 1823,
-									"top": 1351,
+									"left": 1857,
+									"top": 1354,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -7659,8 +7659,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1867,
-									"top": 1358,
+									"left": 1901,
+									"top": 1356,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -7678,7 +7678,7 @@
 								"$ref": "AAAAAAF8vDW/8g3GfhY="
 							},
 							"lineStyle": 1,
-							"points": "1850:1383;1856:1341",
+							"points": "1887:1383;1888:1341",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wed7X9/GI4w="
@@ -7711,8 +7711,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2282,
-									"top": 1228,
+									"left": 2302,
+									"top": 1235,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -7732,8 +7732,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 2282,
-									"top": 1243,
+									"left": 2302,
+									"top": 1250,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -7753,8 +7753,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2281,
-									"top": 1199,
+									"left": 2301,
+									"top": 1206,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -7772,7 +7772,7 @@
 								"$ref": "AAAAAAF8wcK3f9xC+zI="
 							},
 							"lineStyle": 1,
-							"points": "2359:1218;2205:1222",
+							"points": "2359:1227;2245:1228",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weesHd/X9Mw="
@@ -7805,8 +7805,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1843,
-									"top": 860,
+									"left": 1968,
+									"top": 887,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -7826,8 +7826,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 1841,
-									"top": 845,
+									"left": 1967,
+									"top": 872,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -7847,8 +7847,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1846,
-									"top": 889,
+									"left": 1969,
+									"top": 916,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -7866,7 +7866,7 @@
 								"$ref": "AAAAAAF8wQ+Bk3C3WPM="
 							},
 							"lineStyle": 1,
-							"points": "1763:891;1927:872",
+							"points": "1763:919;2175:897",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wef19t/ouWs="
@@ -7899,8 +7899,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2358,
-									"top": 460,
+									"left": 2605,
+									"top": 752,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -7920,8 +7920,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 2373,
-									"top": 463,
+									"left": 2618,
+									"top": 759,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -7941,8 +7941,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2329,
-									"top": 455,
+									"left": 2578,
+									"top": 739,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -7960,7 +7960,7 @@
 								"$ref": "AAAAAAF8wRGAjnERG6w="
 							},
 							"lineStyle": 1,
-							"points": "2389:437;2344:464;2294:743",
+							"points": "2590:437;2592:752;2572:791",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8weiJf9/5ZEo="
@@ -7993,8 +7993,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2214,
-									"top": 545,
+									"left": 2239,
+									"top": 577,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -8014,8 +8014,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 2229,
-									"top": 545,
+									"left": 2254,
+									"top": 577,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -8035,8 +8035,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 2185,
-									"top": 546,
+									"left": 2209,
+									"top": 578,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -8054,7 +8054,7 @@
 								"$ref": "AAAAAAF8wRGAjnERG6w="
 							},
 							"lineStyle": 1,
-							"points": "2273:437;2200:464;2200:640;1737:723",
+							"points": "2234:437;2224:440;2224:728;1759:749",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wei/huALc1Q="
@@ -8087,8 +8087,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 3280,
-									"top": 1592,
+									"left": 3319,
+									"top": 1753,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -8108,8 +8108,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 3280,
-									"top": 1607,
+									"left": 3319,
+									"top": 1768,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -8129,8 +8129,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 3279,
-									"top": 1563,
+									"left": 3320,
+									"top": 1723,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -8148,7 +8148,7 @@
 								"$ref": "AAAAAAF8wRGAjnERG6w="
 							},
 							"lineStyle": 1,
-							"points": "2980:346;3280:360;3280:1584;840:1592;736:1134",
+							"points": "3013:337;3312:344;3320:1744;824:1744;781:1134",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wem1PeAiDt8="
@@ -8181,8 +8181,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 3375,
-									"top": 1664,
+									"left": 3440,
+									"top": 1816,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -8202,8 +8202,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 3375,
-									"top": 1679,
+									"left": 3440,
+									"top": 1831,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -8223,8 +8223,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 3376,
-									"top": 1635,
+									"left": 3439,
+									"top": 1787,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -8242,7 +8242,7 @@
 								"$ref": "AAAAAAF8wRGAjnERG6w="
 							},
 							"lineStyle": 1,
-							"points": "2980:315;3384:304;3376:1656;744:1648;604:1264",
+							"points": "3013:323;3448:320;3440:1808;648:1816;603:1264",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8werBguA+/OY="
@@ -8275,8 +8275,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1896,
-									"top": 752,
+									"left": 2031,
+									"top": 768,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -8296,8 +8296,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 1897,
-									"top": 767,
+									"left": 2031,
+									"top": 783,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -8317,8 +8317,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1895,
-									"top": 723,
+									"left": 2032,
+									"top": 739,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -8336,7 +8336,7 @@
 								"$ref": "AAAAAAF8vEsOpA+75kI="
 							},
 							"lineStyle": 1,
-							"points": "1927:751;1896:744;1737:751",
+							"points": "2175:794;2032:760;1759:759",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wfB4MeBm01k="
@@ -8369,8 +8369,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1691,
-									"top": 1564,
+									"left": 2128,
+									"top": 1636,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 15,
@@ -8390,8 +8390,8 @@
 									},
 									"visible": null,
 									"font": "Arial;13;0",
-									"left": 1691,
-									"top": 1579,
+									"left": 2128,
+									"top": 1651,
 									"height": 13,
 									"alpha": 1.5707963267948966,
 									"distance": 30,
@@ -8411,8 +8411,8 @@
 									},
 									"visible": false,
 									"font": "Arial;13;0",
-									"left": 1692,
-									"top": 1535,
+									"left": 2127,
+									"top": 1607,
 									"height": 13,
 									"alpha": -1.5707963267948966,
 									"distance": 15,
@@ -8430,7 +8430,7 @@
 								"$ref": "AAAAAAF8vEsOpA+75kI="
 							},
 							"lineStyle": 1,
-							"points": "2280:920;2296:1560;1088:1552;656:1264",
+							"points": "2877:876;3232:872;3232:1624;1024:1632;1032:1256;744:1231",
 							"showVisibility": true,
 							"nameLabel": {
 								"$ref": "AAAAAAF8wfCutuB4kLc="
